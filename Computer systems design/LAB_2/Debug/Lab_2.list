
Lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004238  08004238  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004240  08004240  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000890  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000900  20000900  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a62  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b4  00000000  00000000  00029b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000730  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a40  00000000  00000000  0002c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e47  00000000  00000000  0004eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d016d  00000000  00000000  00058be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128d54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002268  00000000  00000000  00128da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800403c 	.word	0x0800403c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800403c 	.word	0x0800403c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <MX_GPIO_Init+0x118>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a3e      	ldr	r2, [pc, #248]	; (80006bc <MX_GPIO_Init+0x118>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <MX_GPIO_Init+0x118>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b38      	ldr	r3, [pc, #224]	; (80006bc <MX_GPIO_Init+0x118>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a37      	ldr	r2, [pc, #220]	; (80006bc <MX_GPIO_Init+0x118>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <MX_GPIO_Init+0x118>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <MX_GPIO_Init+0x118>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <MX_GPIO_Init+0x118>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <MX_GPIO_Init+0x118>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_GPIO_Init+0x118>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a29      	ldr	r2, [pc, #164]	; (80006bc <MX_GPIO_Init+0x118>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_GPIO_Init+0x118>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_GPIO_Init+0x118>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a22      	ldr	r2, [pc, #136]	; (80006bc <MX_GPIO_Init+0x118>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_GPIO_Init+0x118>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064c:	481c      	ldr	r0, [pc, #112]	; (80006c0 <MX_GPIO_Init+0x11c>)
 800064e:	f001 f9e3 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <MX_GPIO_Init+0x120>)
 800065a:	f001 f9dd 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800065e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <MX_GPIO_Init+0x11c>)
 8000678:	f001 f80a 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800067c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <MX_GPIO_Init+0x11c>)
 8000692:	f000 fffd 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000696:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_GPIO_Init+0x120>)
 80006b0:	f000 ffee 	bl	8001690 <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00

080006c8 <buf_init>:
  bool empty;
};

typedef struct RingBuffer RingBuffer;

static void buf_init(RingBuffer *buf) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  buf->head = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  buf->tail = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  buf->empty = true;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <buf_push>:

static void buf_push(RingBuffer *buf, char *el) {
 80006f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
  uint64_t size = strlen(el);
 8000700:	68b8      	ldr	r0, [r7, #8]
 8000702:	f7ff fd75 	bl	80001f0 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	2200      	movs	r2, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000712:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if (buf->head + size + 1 > BUF_SIZE) {
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2200      	movs	r2, #0
 8000720:	469a      	mov	sl, r3
 8000722:	4693      	mov	fp, r2
 8000724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000728:	eb1a 0802 	adds.w	r8, sl, r2
 800072c:	eb4b 0903 	adc.w	r9, fp, r3
 8000730:	f118 0401 	adds.w	r4, r8, #1
 8000734:	f149 0500 	adc.w	r5, r9, #0
 8000738:	f240 4301 	movw	r3, #1025	; 0x401
 800073c:	429c      	cmp	r4, r3
 800073e:	f175 0300 	sbcs.w	r3, r5, #0
 8000742:	d303      	bcc.n	800074c <buf_push+0x58>
    buf->head = 0;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  }

  strcpy(&buf->data[buf->head], el);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4413      	add	r3, r2
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f8be 	bl	80038dc <strcpy>
  //    buf->data[buf->head] = el;
  buf->head += size + 1;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8000766:	7c3b      	ldrb	r3, [r7, #16]
 8000768:	4413      	add	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

  if (buf->head == BUF_SIZE) {
    buf->head = 0;
  }

  buf->empty = false;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000788 <buf_pop>:

static bool buf_pop(RingBuffer *buf, /* out */ char *el) {
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  if (buf->empty) {
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <buf_pop+0x18>
    return false;
 800079c:	2300      	movs	r3, #0
 800079e:	e039      	b.n	8000814 <buf_pop+0x8c>
  }

  uint64_t size = strlen(&buf->data[buf->tail]);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd1f 	bl	80001f0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2200      	movs	r2, #0
 80007b6:	461c      	mov	r4, r3
 80007b8:	4615      	mov	r5, r2
 80007ba:	e9c7 4502 	strd	r4, r5, [r7, #8]

  strcpy(el, &buf->data[buf->tail]);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	4619      	mov	r1, r3
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f003 f885 	bl	80038dc <strcpy>
  buf->tail += size + 1;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 80007d8:	7a3b      	ldrb	r3, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

  if (buf->tail == BUF_SIZE || buf->tail == '\0') {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <buf_pop+0x72>
    buf->tail = 0;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  }

  if (buf->tail == buf->head) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000806:	429a      	cmp	r2, r3
 8000808:	d103      	bne.n	8000812 <buf_pop+0x8a>
    buf->empty = true;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2201      	movs	r2, #1
 800080e:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
  }

  return true;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bdb0      	pop	{r4, r5, r7, pc}

0800081c <is_button_active>:
static struct RingBuffer ringBuffer;
static struct RingBuffer ringBufferTx;

static char el[2] = {"\0\0"};

static bool is_button_active() {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET;
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <is_button_active+0x20>)
 8000826:	f001 f8df 	bl	80019e8 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2db      	uxtb	r3, r3
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020800 	.word	0x40020800

08000840 <set_red_led>:

static void set_green_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }

static void set_yellow_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }

static void set_red_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	461a      	mov	r2, r3
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <set_red_led+0x20>)
 8000854:	f001 f8e0 	bl	8001a18 <HAL_GPIO_WritePin>
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40020c00 	.word	0x40020c00

08000864 <update_button_state>:
    bool is_pressed;
    bool signaled;
    uint32_t press_start_time;
};

static bool update_button_state(struct ButtonState *state) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    if (state->is_pressed) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d01a      	beq.n	80008aa <update_button_state+0x46>
        state->is_pressed = is_button_active();
 8000874:	f7ff ffd2 	bl	800081c <is_button_active>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	701a      	strb	r2, [r3, #0]

        if (state->signaled) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <update_button_state+0x28>
            return false;
 8000888:	2300      	movs	r3, #0
 800088a:	e01f      	b.n	80008cc <update_button_state+0x68>
        }

        if ((HAL_GetTick() - state->press_start_time) > 20 /* ms */) {
 800088c:	f000 fd12 	bl	80012b4 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b14      	cmp	r3, #20
 800089a:	d904      	bls.n	80008a6 <update_button_state+0x42>
            state->signaled = true;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2201      	movs	r2, #1
 80008a0:	705a      	strb	r2, [r3, #1]
            return true;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e012      	b.n	80008cc <update_button_state+0x68>
        }
        return false;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e010      	b.n	80008cc <update_button_state+0x68>
    }

    if (is_button_active()) {
 80008aa:	f7ff ffb7 	bl	800081c <is_button_active>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <update_button_state+0x66>
        state->press_start_time = HAL_GetTick();
 80008b4:	f000 fcfe 	bl	80012b4 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	605a      	str	r2, [r3, #4]
        state->is_pressed = true;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
        state->signaled = false;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	705a      	strb	r2, [r3, #1]
    }

    return false;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <enable_interrupt>:

static struct Status status;

bool transmit_busy = false;

void enable_interrupt(struct Status *status) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80008dc:	2047      	movs	r0, #71	; 0x47
 80008de:	f000 fe10 	bl	8001502 <HAL_NVIC_EnableIRQ>
	status->interrupt_enable = true;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <disable_interrupt>:

void disable_interrupt(struct Status *status) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive(&huart6);
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <disable_interrupt+0x24>)
 80008fa:	f001 fef5 	bl	80026e8 <HAL_UART_AbortReceive>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 80008fe:	2047      	movs	r0, #71	; 0x47
 8000900:	f000 fe0d 	bl	800151e <HAL_NVIC_DisableIRQ>
    status->interrupt_enable = false;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200008a8 	.word	0x200008a8

08000918 <transmit_uart>:

void transmit_uart(const struct Status *status, char *buf, size_t size) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  if (status->interrupt_enable) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d013      	beq.n	8000954 <transmit_uart+0x3c>
    if (transmit_busy) {
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <transmit_uart+0x50>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d004      	beq.n	800093e <transmit_uart+0x26>
      buf_push(&ringBufferTx, buf);
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <transmit_uart+0x54>)
 8000938:	f7ff fedc 	bl	80006f4 <buf_push>
    } else {
      HAL_UART_Transmit_IT(&huart6, buf, size);
      transmit_busy = true;
    }
    return;
 800093c:	e011      	b.n	8000962 <transmit_uart+0x4a>
      HAL_UART_Transmit_IT(&huart6, buf, size);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	480a      	ldr	r0, [pc, #40]	; (8000970 <transmit_uart+0x58>)
 8000948:	f001 fe59 	bl	80025fe <HAL_UART_Transmit_IT>
      transmit_busy = true;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <transmit_uart+0x50>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
    return;
 8000952:	e006      	b.n	8000962 <transmit_uart+0x4a>
  }
  HAL_UART_Transmit(&huart6, buf, size, 100);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	b29a      	uxth	r2, r3
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <transmit_uart+0x58>)
 800095e:	f001 fd1a 	bl	8002396 <HAL_UART_Transmit>
}
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200008a0 	.word	0x200008a0
 800096c:	20000490 	.word	0x20000490
 8000970:	200008a8 	.word	0x200008a8

08000974 <transmit_uart_nl>:

void transmit_uart_nl(const struct Status *status, char *buf, size_t size) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  transmit_uart(status, buf, size);
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ffc7 	bl	8000918 <transmit_uart>
  transmit_uart(status, "\r\n", 2);
 800098a:	2202      	movs	r2, #2
 800098c:	4903      	ldr	r1, [pc, #12]	; (800099c <transmit_uart_nl+0x28>)
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff ffc2 	bl	8000918 <transmit_uart>
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08004054 	.word	0x08004054

080009a0 <receive_uart>:

void receive_uart(const struct Status *status) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if (status->interrupt_enable) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d005      	beq.n	80009bc <receive_uart+0x1c>
    HAL_UART_Receive_IT(&huart6, el, sizeof(char));
 80009b0:	2201      	movs	r2, #1
 80009b2:	4911      	ldr	r1, [pc, #68]	; (80009f8 <receive_uart+0x58>)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <receive_uart+0x5c>)
 80009b6:	f001 fe67 	bl	8002688 <HAL_UART_Receive_IT>
    return;
 80009ba:	e01a      	b.n	80009f2 <receive_uart+0x52>
  }
  HAL_StatusTypeDef stat = HAL_UART_Receive(&huart6, el, sizeof(char), 0);
 80009bc:	2300      	movs	r3, #0
 80009be:	2201      	movs	r2, #1
 80009c0:	490d      	ldr	r1, [pc, #52]	; (80009f8 <receive_uart+0x58>)
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <receive_uart+0x5c>)
 80009c4:	f001 fd79 	bl	80024ba <HAL_UART_Receive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]
  switch (stat) {
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d005      	beq.n	80009de <receive_uart+0x3e>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0d      	blt.n	80009f2 <receive_uart+0x52>
 80009d6:	3b01      	subs	r3, #1
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d80a      	bhi.n	80009f2 <receive_uart+0x52>
    break;
  }
  case HAL_ERROR:
  case HAL_BUSY:
  case HAL_TIMEOUT:
    break;
 80009dc:	e009      	b.n	80009f2 <receive_uart+0x52>
    buf_push(&ringBuffer, el);
 80009de:	4906      	ldr	r1, [pc, #24]	; (80009f8 <receive_uart+0x58>)
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <receive_uart+0x60>)
 80009e2:	f7ff fe87 	bl	80006f4 <buf_push>
    transmit_uart(status, el, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	4903      	ldr	r1, [pc, #12]	; (80009f8 <receive_uart+0x58>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ff94 	bl	8000918 <transmit_uart>
    break;
 80009f0:	bf00      	nop
  }
}
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000894 	.word	0x20000894
 80009fc:	200008a8 	.word	0x200008a8
 8000a00:	2000008c 	.word	0x2000008c

08000a04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  buf_push(&ringBuffer, el);
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <HAL_UART_RxCpltCallback+0x24>)
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <HAL_UART_RxCpltCallback+0x28>)
 8000a10:	f7ff fe70 	bl	80006f4 <buf_push>
  transmit_uart(&status, el, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	4904      	ldr	r1, [pc, #16]	; (8000a28 <HAL_UART_RxCpltCallback+0x24>)
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_RxCpltCallback+0x2c>)
 8000a1a:	f7ff ff7d 	bl	8000918 <transmit_uart>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000894 	.word	0x20000894
 8000a2c:	2000008c 	.word	0x2000008c
 8000a30:	20000898 	.word	0x20000898

08000a34 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000a40:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000a44:	6018      	str	r0, [r3, #0]
  char buf[1024];
  if (buf_pop(&ringBufferTx, buf)) {
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <HAL_UART_TxCpltCallback+0x50>)
 8000a4e:	f7ff fe9b 	bl	8000788 <buf_pop>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00d      	beq.n	8000a74 <HAL_UART_TxCpltCallback+0x40>
    HAL_UART_Transmit_IT(&huart6, buf, strlen(buf));
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbc7 	bl	80001f0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_UART_TxCpltCallback+0x54>)
 8000a6e:	f001 fdc6 	bl	80025fe <HAL_UART_Transmit_IT>
  } else {
    transmit_busy = false;
  }
}
 8000a72:	e002      	b.n	8000a7a <HAL_UART_TxCpltCallback+0x46>
    transmit_busy = false;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_UART_TxCpltCallback+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000490 	.word	0x20000490
 8000a88:	200008a8 	.word	0x200008a8
 8000a8c:	200008a0 	.word	0x200008a0

08000a90 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a94:	b09f      	sub	sp, #124	; 0x7c
 8000a96:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f000 fba6 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f9f4 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa0:	f7ff fd80 	bl	80005a4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000aa4:	f000 fafc 	bl	80010a0 <MX_USART6_UART_Init>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    char interrupt_enabled_msg[] = {"Interrupts ON"};
 8000aa8:	4bb9      	ldr	r3, [pc, #740]	; (8000d90 <main+0x300>)
 8000aaa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ab2:	8023      	strh	r3, [r4, #0]
    char interrupt_disabled_msg[] = {"Interrupts OFF"};
 8000ab4:	4bb7      	ldr	r3, [pc, #732]	; (8000d94 <main+0x304>)
 8000ab6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abc:	c407      	stmia	r4!, {r0, r1, r2}
 8000abe:	8023      	strh	r3, [r4, #0]
 8000ac0:	3402      	adds	r4, #2
 8000ac2:	0c1b      	lsrs	r3, r3, #16
 8000ac4:	7023      	strb	r3, [r4, #0]
    char error_msg[] = {"\r\nerror\n"};
 8000ac6:	4ab4      	ldr	r2, [pc, #720]	; (8000d98 <main+0x308>)
 8000ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ace:	c303      	stmia	r3!, {r0, r1}
 8000ad0:	701a      	strb	r2, [r3, #0]

    struct ButtonState buttonState = {.press_start_time = 0, .signaled = false, .is_pressed = false};
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3020 	strb.w	r3, [r7, #32]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24

    enable_interrupt(&status);
 8000ae2:	48ae      	ldr	r0, [pc, #696]	; (8000d9c <main+0x30c>)
 8000ae4:	f7ff fef6 	bl	80008d4 <enable_interrupt>
    buf_init(&ringBuffer);
 8000ae8:	48ad      	ldr	r0, [pc, #692]	; (8000da0 <main+0x310>)
 8000aea:	f7ff fded 	bl	80006c8 <buf_init>

    uint32_t arg1 = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t arg2 = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	673b      	str	r3, [r7, #112]	; 0x70
    int64_t res = 0;
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    char res_str [8];
    char op;
    enum ValueDefenition exprState = LeftValue;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    set_red_led(false);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fe99 	bl	8000840 <set_red_led>

    while (1) {
    	if (update_button_state(&buttonState)) {
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fea6 	bl	8000864 <update_button_state>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d018      	beq.n	8000b50 <main+0xc0>
    	            if (status.interrupt_enable) {
 8000b1e:	4b9f      	ldr	r3, [pc, #636]	; (8000d9c <main+0x30c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00a      	beq.n	8000b3c <main+0xac>
    	                disable_interrupt(&status);
 8000b26:	489d      	ldr	r0, [pc, #628]	; (8000d9c <main+0x30c>)
 8000b28:	f7ff fee2 	bl	80008f0 <disable_interrupt>
    	                transmit_uart_nl(&status, interrupt_disabled_msg, sizeof(interrupt_disabled_msg));
 8000b2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b30:	220f      	movs	r2, #15
 8000b32:	4619      	mov	r1, r3
 8000b34:	4899      	ldr	r0, [pc, #612]	; (8000d9c <main+0x30c>)
 8000b36:	f7ff ff1d 	bl	8000974 <transmit_uart_nl>
 8000b3a:	e009      	b.n	8000b50 <main+0xc0>
    	            } else {
    	                enable_interrupt(&status);
 8000b3c:	4897      	ldr	r0, [pc, #604]	; (8000d9c <main+0x30c>)
 8000b3e:	f7ff fec9 	bl	80008d4 <enable_interrupt>
    	                transmit_uart_nl(&status, interrupt_enabled_msg, sizeof(interrupt_enabled_msg));
 8000b42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b46:	220e      	movs	r2, #14
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4894      	ldr	r0, [pc, #592]	; (8000d9c <main+0x30c>)
 8000b4c:	f7ff ff12 	bl	8000974 <transmit_uart_nl>
    	            }
    	        }

    	        receive_uart(&status);
 8000b50:	4892      	ldr	r0, [pc, #584]	; (8000d9c <main+0x30c>)
 8000b52:	f7ff ff25 	bl	80009a0 <receive_uart>

    	        char c[2];

    	        if ((exprState != ResultValue && exprState != ErrorValue) && !buf_pop(&ringBuffer, c)) {
 8000b56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d010      	beq.n	8000b80 <main+0xf0>
 8000b5e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b62:	2b05      	cmp	r3, #5
 8000b64:	d00c      	beq.n	8000b80 <main+0xf0>
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	488c      	ldr	r0, [pc, #560]	; (8000da0 <main+0x310>)
 8000b6e:	f7ff fe0b 	bl	8000788 <buf_pop>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8173 	bne.w	8000e66 <main+0x3d6>
    	            continue;
    	        }

    	        switch (exprState) {
 8000b80:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b84:	2b05      	cmp	r3, #5
 8000b86:	f200 8170 	bhi.w	8000e6a <main+0x3da>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <main+0x100>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000ba9 	.word	0x08000ba9
 8000b94:	08000bfd 	.word	0x08000bfd
 8000b98:	08000c7f 	.word	0x08000c7f
 8000b9c:	08000ccd 	.word	0x08000ccd
 8000ba0:	08000d23 	.word	0x08000d23
 8000ba4:	08000e37 	.word	0x08000e37
    	            case LeftValue: {
    	                if (!isdigit(c[0])) {
 8000ba8:	7d3b      	ldrb	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a7d      	ldr	r2, [pc, #500]	; (8000da4 <main+0x314>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <main+0x132>
    	                	exprState = ErrorValue;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                    break;
 8000bc0:	e15c      	b.n	8000e7c <main+0x3ec>
    	                }
    	                exprState = LeftValueWithOperand;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                set_red_led(false);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fe39 	bl	8000840 <set_red_led>
    	                arg1 = arg1 * 10 + (c[0] - 48);
 8000bce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	461a      	mov	r2, r3
 8000bda:	7d3b      	ldrb	r3, [r7, #20]
 8000bdc:	4413      	add	r3, r2
 8000bde:	3b30      	subs	r3, #48	; 0x30
 8000be0:	677b      	str	r3, [r7, #116]	; 0x74
    	                uint16_t new_arg1 = (uint16_t) arg1;
 8000be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000be4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    	                if (arg1 != new_arg1) {
 8000be8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000bec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	f000 813d 	beq.w	8000e6e <main+0x3de>
    	                    exprState = ErrorValue;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                }
    	                break;
 8000bfa:	e138      	b.n	8000e6e <main+0x3de>
    	            }
    	            case LeftValueWithOperand: {
						if (!isdigit(c[0])) {
 8000bfc:	7d3b      	ldrb	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a68      	ldr	r2, [pc, #416]	; (8000da4 <main+0x314>)
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d120      	bne.n	8000c50 <main+0x1c0>
							switch (c[0]) {
 8000c0e:	7d3b      	ldrb	r3, [r7, #20]
 8000c10:	3b2a      	subs	r3, #42	; 0x2a
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	bf8c      	ite	hi
 8000c16:	2201      	movhi	r2, #1
 8000c18:	2200      	movls	r2, #0
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d112      	bne.n	8000c46 <main+0x1b6>
 8000c20:	2201      	movs	r2, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	f003 032b 	and.w	r3, r3, #43	; 0x2b
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <main+0x1b6>
								case '+':
								case '-':
								case '*':
								case '/': {
									op = c[0];
 8000c38:	7d3b      	ldrb	r3, [r7, #20]
 8000c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
									exprState = RightValue;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
									break;
 8000c44:	e003      	b.n	8000c4e <main+0x1be>
								}
								default:
									exprState = ErrorValue;
 8000c46:	2305      	movs	r3, #5
 8000c48:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
									break;
 8000c4c:	bf00      	nop
							}
							break;
 8000c4e:	e115      	b.n	8000e7c <main+0x3ec>
						}
						arg1 = arg1 * 10 + (c[0] - 48);
 8000c50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	7d3b      	ldrb	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	3b30      	subs	r3, #48	; 0x30
 8000c62:	677b      	str	r3, [r7, #116]	; 0x74
						uint16_t new_arg1 = (uint16_t) arg1;
 8000c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
						if (arg1 != new_arg1) {
 8000c6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f000 80fe 	beq.w	8000e72 <main+0x3e2>
							exprState = ErrorValue;
 8000c76:	2305      	movs	r3, #5
 8000c78:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						}
						break;
 8000c7c:	e0f9      	b.n	8000e72 <main+0x3e2>
					}
    	            case RightValue: {
    	                if (!isdigit(c[0])) {
 8000c7e:	7d3b      	ldrb	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <main+0x314>)
 8000c84:	4413      	add	r3, r2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d103      	bne.n	8000c98 <main+0x208>
    	                    exprState = ErrorValue;
 8000c90:	2305      	movs	r3, #5
 8000c92:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                    break;
 8000c96:	e0f1      	b.n	8000e7c <main+0x3ec>
    	                }
    	                exprState = RightValueWithEquals;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                arg2 = arg2 * 10 + (c[0] - 48);
 8000c9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	461a      	mov	r2, r3
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	3b30      	subs	r3, #48	; 0x30
 8000cb0:	673b      	str	r3, [r7, #112]	; 0x70
    	                uint16_t new_arg2 = (uint16_t) arg2;
 8000cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    	                if (arg2 != new_arg2) {
 8000cb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000cbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	f000 80d9 	beq.w	8000e76 <main+0x3e6>
    	                    exprState = ErrorValue;
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                }
    	                break;
 8000cca:	e0d4      	b.n	8000e76 <main+0x3e6>
    	            }
    	            case RightValueWithEquals: {
						if (!isdigit(c[0])) {
 8000ccc:	7d3b      	ldrb	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <main+0x314>)
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10a      	bne.n	8000cf4 <main+0x264>
							if (c[0] == '=') {
 8000cde:	7d3b      	ldrb	r3, [r7, #20]
 8000ce0:	2b3d      	cmp	r3, #61	; 0x3d
 8000ce2:	d103      	bne.n	8000cec <main+0x25c>
								exprState = ResultValue;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							} else {
								exprState = ErrorValue;
							}
							break;
 8000cea:	e0c7      	b.n	8000e7c <main+0x3ec>
								exprState = ErrorValue;
 8000cec:	2305      	movs	r3, #5
 8000cee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							break;
 8000cf2:	e0c3      	b.n	8000e7c <main+0x3ec>
						}
						arg2 = arg2 * 10 + (c[0] - 48);
 8000cf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7d3b      	ldrb	r3, [r7, #20]
 8000d02:	4413      	add	r3, r2
 8000d04:	3b30      	subs	r3, #48	; 0x30
 8000d06:	673b      	str	r3, [r7, #112]	; 0x70
						uint16_t new_arg2 = (uint16_t) arg2;
 8000d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d0a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
						if (arg2 != new_arg2) {
 8000d0e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f000 80b0 	beq.w	8000e7a <main+0x3ea>
							exprState = ErrorValue;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						}
						break;
 8000d20:	e0ab      	b.n	8000e7a <main+0x3ea>
					}
    	            case ResultValue: {
    	            	int32_t arg1_c = arg1;
 8000d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d24:	663b      	str	r3, [r7, #96]	; 0x60
    	            	int32_t arg2_c = arg2;
 8000d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d28:	65fb      	str	r3, [r7, #92]	; 0x5c
    	                switch (op) {
 8000d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d2e:	3b2a      	subs	r3, #42	; 0x2a
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d84c      	bhi.n	8000dce <main+0x33e>
 8000d34:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <main+0x2ac>)
 8000d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3a:	bf00      	nop
 8000d3c:	08000d79 	.word	0x08000d79
 8000d40:	08000d55 	.word	0x08000d55
 8000d44:	08000dcf 	.word	0x08000dcf
 8000d48:	08000d67 	.word	0x08000d67
 8000d4c:	08000dcf 	.word	0x08000dcf
 8000d50:	08000da9 	.word	0x08000da9
    	                    case '+':
    	                        res = arg1_c + arg2_c;
 8000d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d58:	4413      	add	r3, r2
 8000d5a:	17da      	asrs	r2, r3, #31
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	4693      	mov	fp, r2
 8000d60:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    	                        break;
 8000d64:	e034      	b.n	8000dd0 <main+0x340>
    	                    case '-':
    	                        res = arg1_c - arg2_c;
 8000d66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	17da      	asrs	r2, r3, #31
 8000d6e:	461d      	mov	r5, r3
 8000d70:	4616      	mov	r6, r2
 8000d72:	e9c7 561a 	strd	r5, r6, [r7, #104]	; 0x68
    	                        break;
 8000d76:	e02b      	b.n	8000dd0 <main+0x340>
    	                    case '*':
    	                        res = arg1_c * arg2_c;
 8000d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	17da      	asrs	r2, r3, #31
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	60fa      	str	r2, [r7, #12]
 8000d86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000d8a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    	                        break;
 8000d8e:	e01f      	b.n	8000dd0 <main+0x340>
 8000d90:	0800405c 	.word	0x0800405c
 8000d94:	0800406c 	.word	0x0800406c
 8000d98:	0800407c 	.word	0x0800407c
 8000d9c:	20000898 	.word	0x20000898
 8000da0:	2000008c 	.word	0x2000008c
 8000da4:	080040a0 	.word	0x080040a0
    	                    case '/':{
    	                    	if (arg2_c == 0) {
 8000da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d103      	bne.n	8000db6 <main+0x326>
    	                    		exprState = ErrorValue;
 8000dae:	2305      	movs	r3, #5
 8000db0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                    		continue;
 8000db4:	e062      	b.n	8000e7c <main+0x3ec>
    	                    	} else {
    	                    		res = arg1_c / arg2_c;
 8000db6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dbe:	17da      	asrs	r2, r3, #31
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000dc8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    	                    	}
    	                        break;
 8000dcc:	e000      	b.n	8000dd0 <main+0x340>
    	                    }
    	                    default:
    	                        break;
 8000dce:	bf00      	nop
    	                }

    	                int16_t actual_res = res;
 8000dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dd2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    	                if (actual_res != res) {
 8000dd6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000dda:	17da      	asrs	r2, r3, #31
 8000ddc:	4698      	mov	r8, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000de4:	454b      	cmp	r3, r9
 8000de6:	bf08      	it	eq
 8000de8:	4542      	cmpeq	r2, r8
 8000dea:	d003      	beq.n	8000df4 <main+0x364>
    	                    exprState = ErrorValue;
 8000dec:	2305      	movs	r3, #5
 8000dee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                    break;
 8000df2:	e043      	b.n	8000e7c <main+0x3ec>
    	                }

    	                sprintf(res_str, "%d", res);
 8000df4:	f107 0018 	add.w	r0, r7, #24
 8000df8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000dfc:	4920      	ldr	r1, [pc, #128]	; (8000e80 <main+0x3f0>)
 8000dfe:	f002 fd4d 	bl	800389c <siprintf>
    	                transmit_uart_nl(&status, res_str, strlen(res_str));
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9f2 	bl	80001f0 <strlen>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4619      	mov	r1, r3
 8000e14:	481b      	ldr	r0, [pc, #108]	; (8000e84 <main+0x3f4>)
 8000e16:	f7ff fdad 	bl	8000974 <transmit_uart_nl>
    	                arg1 = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	677b      	str	r3, [r7, #116]	; 0x74
    	                arg2 = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	673b      	str	r3, [r7, #112]	; 0x70
    	                res = 0;
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    	                exprState = LeftValue;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                break;
 8000e34:	e022      	b.n	8000e7c <main+0x3ec>
    	            }
    	            case ErrorValue: {
    	                arg1 = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	677b      	str	r3, [r7, #116]	; 0x74
    	                arg2 = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	673b      	str	r3, [r7, #112]	; 0x70
    	                res = 0;
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    	                set_red_led(true);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fcf8 	bl	8000840 <set_red_led>
    	                transmit_uart_nl(&status, error_msg, sizeof(error_msg));
 8000e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e54:	2209      	movs	r2, #9
 8000e56:	4619      	mov	r1, r3
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <main+0x3f4>)
 8000e5a:	f7ff fd8b 	bl	8000974 <transmit_uart_nl>
    	                exprState = LeftValue;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    	                break;
 8000e64:	e00a      	b.n	8000e7c <main+0x3ec>
    	            continue;
 8000e66:	bf00      	nop
 8000e68:	e651      	b.n	8000b0e <main+0x7e>
    	            }
    	            default:
    	                break;
 8000e6a:	bf00      	nop
 8000e6c:	e64f      	b.n	8000b0e <main+0x7e>
    	                break;
 8000e6e:	bf00      	nop
 8000e70:	e64d      	b.n	8000b0e <main+0x7e>
						break;
 8000e72:	bf00      	nop
 8000e74:	e64b      	b.n	8000b0e <main+0x7e>
    	                break;
 8000e76:	bf00      	nop
 8000e78:	e649      	b.n	8000b0e <main+0x7e>
						break;
 8000e7a:	bf00      	nop
    while (1) {
 8000e7c:	e647      	b.n	8000b0e <main+0x7e>
 8000e7e:	bf00      	nop
 8000e80:	08004058 	.word	0x08004058
 8000e84:	20000898 	.word	0x20000898

08000e88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2230      	movs	r2, #48	; 0x30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fc54 	bl	8003744 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <SystemClock_Config+0xb8>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a22      	ldr	r2, [pc, #136]	; (8000f40 <SystemClock_Config+0xb8>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <SystemClock_Config+0xb8>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <SystemClock_Config+0xbc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <SystemClock_Config+0xbc>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <SystemClock_Config+0xbc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fda5 	bl	8001a4c <HAL_RCC_OscConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000f08:	f000 f81e 	bl	8000f48 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 f808 	bl	8001f3c <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000f32:	f000 f809 	bl	8000f48 <Error_Handler>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	; 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f94a 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USART6_IRQHandler+0x10>)
 8001002:	f001 fc15 	bl	8002830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200008a8 	.word	0x200008a8

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f002 fb54 	bl	80036ec <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20030000 	.word	0x20030000
 8001070:	00000400 	.word	0x00000400
 8001074:	200008a4 	.word	0x200008a4
 8001078:	20000900 	.word	0x20000900

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_USART6_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010d8:	f001 f910 	bl	80022fc <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010e2:	f7ff ff31 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200008a8 	.word	0x200008a8
 80010f0:	40011400 	.word	0x40011400

080010f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_UART_MspInit+0x94>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d133      	bne.n	800117e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_UART_MspInit+0x98>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_UART_MspInit+0x98>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0x98>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x98>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_UART_MspInit+0x98>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800114e:	23c0      	movs	r3, #192	; 0xc0
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800115e:	2308      	movs	r3, #8
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <HAL_UART_MspInit+0x9c>)
 800116a:	f000 fa91 	bl	8001690 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2047      	movs	r0, #71	; 0x47
 8001174:	f000 f9a9 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001178:	2047      	movs	r0, #71	; 0x47
 800117a:	f000 f9c2 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40011400 	.word	0x40011400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020800 	.word	0x40020800

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b0:	4c0b      	ldr	r4, [pc, #44]	; (80011e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011be:	f7ff ff5d 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f002 fa99 	bl	80036f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fc63 	bl	8000a90 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011d8:	08004248 	.word	0x08004248
  ldr r2, =_sbss
 80011dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e0:	20000900 	.word	0x20000900

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94f 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fe9c 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f975 	bl	800153a <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f92f 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200008ec 	.word	0x200008ec

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200008ec 	.word	0x200008ec

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db12      	blt.n	80013a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	490a      	ldr	r1, [pc, #40]	; (80013b0 <__NVIC_DisableIRQ+0x44>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	3320      	adds	r3, #32
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001398:	f3bf 8f4f 	dsb	sy
}
 800139c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800139e:	f3bf 8f6f 	isb	sy
}
 80013a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff05 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff1a 	bl	8001314 <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff0d 	bl	8001330 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff1d 	bl	800136c <__NVIC_DisableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff94 	bl	8001470 <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff fea8 	bl	80012b4 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d008      	beq.n	8001584 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e052      	b.n	800162a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0216 	bic.w	r2, r2, #22
 8001592:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d103      	bne.n	80015b4 <HAL_DMA_Abort+0x62>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0208 	bic.w	r2, r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d4:	e013      	b.n	80015fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d6:	f7ff fe6d 	bl	80012b4 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d90c      	bls.n	80015fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e015      	b.n	800162a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e4      	bne.n	80015d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	223f      	movs	r2, #63	; 0x3f
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d004      	beq.n	8001650 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e00c      	b.n	800166a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2205      	movs	r2, #5
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e177      	b.n	800199c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8166 	bne.w	8001996 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80c0 	beq.w	8001996 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <HAL_GPIO_Init+0x324>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <HAL_GPIO_Init+0x324>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b63      	ldr	r3, [pc, #396]	; (80019b4 <HAL_GPIO_Init+0x324>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <HAL_GPIO_Init+0x328>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_GPIO_Init+0x32c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d037      	beq.n	80018ce <HAL_GPIO_Init+0x23e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d031      	beq.n	80018ca <HAL_GPIO_Init+0x23a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x334>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02b      	beq.n	80018c6 <HAL_GPIO_Init+0x236>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a55      	ldr	r2, [pc, #340]	; (80019c8 <HAL_GPIO_Init+0x338>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x232>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a54      	ldr	r2, [pc, #336]	; (80019cc <HAL_GPIO_Init+0x33c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x22e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a53      	ldr	r2, [pc, #332]	; (80019d0 <HAL_GPIO_Init+0x340>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x22a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_GPIO_Init+0x344>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_GPIO_Init+0x348>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x222>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_GPIO_Init+0x34c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x21e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4f      	ldr	r2, [pc, #316]	; (80019e0 <HAL_GPIO_Init+0x350>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x21a>
 80018a6:	2309      	movs	r3, #9
 80018a8:	e012      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018aa:	230a      	movs	r3, #10
 80018ac:	e010      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018ae:	2308      	movs	r3, #8
 80018b0:	e00e      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e00c      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018b6:	2306      	movs	r3, #6
 80018b8:	e00a      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018ba:	2305      	movs	r3, #5
 80018bc:	e008      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018be:	2304      	movs	r3, #4
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e004      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x240>
 80018ce:	2300      	movs	r3, #0
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f002 0203 	and.w	r2, r2, #3
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	4093      	lsls	r3, r2
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e0:	4935      	ldr	r1, [pc, #212]	; (80019b8 <HAL_GPIO_Init+0x328>)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_GPIO_Init+0x354>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001912:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <HAL_GPIO_Init+0x354>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_GPIO_Init+0x354>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <HAL_GPIO_Init+0x354>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_GPIO_Init+0x354>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_GPIO_Init+0x354>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_GPIO_Init+0x354>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_GPIO_Init+0x354>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	f67f ae84 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40021400 	.word	0x40021400
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40021c00 	.word	0x40021c00
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40022400 	.word	0x40022400
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e267      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d075      	beq.n	8001b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d00c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a76:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a82:	4b82      	ldr	r3, [pc, #520]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d05b      	beq.n	8001b54 <HAL_RCC_OscConfig+0x108>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d157      	bne.n	8001b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e242      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x74>
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01d      	b.n	8001afc <HAL_RCC_OscConfig+0xb0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x98>
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6f      	ldr	r2, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6c      	ldr	r2, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0xb0>
 8001ae4:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a68      	ldr	r2, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fbd6 	bl	80012b4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fbd2 	bl	80012b4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e207      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0xc0>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fbc2 	bl	80012b4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fbbe 	bl	80012b4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1f3      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0xe8>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d063      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d11c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x152>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1c7      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e03a      	b.n	8001c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_OscConfig+0x244>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fb77 	bl	80012b4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff fb73 	bl	80012b4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1a8      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4925      	ldr	r1, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x244>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb56 	bl	80012b4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fb52 	bl	80012b4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e187      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d036      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x248>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff fb36 	bl	80012b4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fb32 	bl	80012b4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e167      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x240>)
 8001c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x200>
 8001c6a:	e01b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x248>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb1f 	bl	80012b4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	e00e      	b.n	8001c98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fb1b 	bl	80012b4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d907      	bls.n	8001c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e150      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	42470000 	.word	0x42470000
 8001c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ea      	bne.n	8001c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8097 	beq.w	8001de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b81      	ldr	r3, [pc, #516]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b7d      	ldr	r3, [pc, #500]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a7c      	ldr	r2, [pc, #496]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b77      	ldr	r3, [pc, #476]	; (8001ec0 <HAL_RCC_OscConfig+0x474>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b74      	ldr	r3, [pc, #464]	; (8001ec0 <HAL_RCC_OscConfig+0x474>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a73      	ldr	r2, [pc, #460]	; (8001ec0 <HAL_RCC_OscConfig+0x474>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fadb 	bl	80012b4 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d02:	f7ff fad7 	bl	80012b4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e10c      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x474>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2ea>
 8001d28:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a63      	ldr	r2, [pc, #396]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e01c      	b.n	8001d70 <HAL_RCC_OscConfig+0x324>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x30c>
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	4a5e      	ldr	r2, [pc, #376]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4a:	4b5c      	ldr	r3, [pc, #368]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a5b      	ldr	r2, [pc, #364]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0x324>
 8001d58:	4b58      	ldr	r3, [pc, #352]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a57      	ldr	r2, [pc, #348]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	4b55      	ldr	r3, [pc, #340]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a54      	ldr	r2, [pc, #336]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d015      	beq.n	8001da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff fa9c 	bl	80012b4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7ff fa98 	bl	80012b4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0cb      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0ee      	beq.n	8001d80 <HAL_RCC_OscConfig+0x334>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7ff fa86 	bl	80012b4 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff fa82 	bl	80012b4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0b5      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ee      	bne.n	8001dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a1 	beq.w	8001f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d05c      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d141      	bne.n	8001e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_RCC_OscConfig+0x478>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fa56 	bl	80012b4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fa52 	bl	80012b4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e087      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	019b      	lsls	r3, r3, #6
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	3b01      	subs	r3, #1
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	491b      	ldr	r1, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x478>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fa2b 	bl	80012b4 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff fa27 	bl	80012b4 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e05c      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x416>
 8001e80:	e054      	b.n	8001f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x478>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fa14 	bl	80012b4 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fa10 	bl	80012b4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e045      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_OscConfig+0x470>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x444>
 8001eae:	e03d      	b.n	8001f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e038      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x4ec>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d028      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d121      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d11a      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef8:	4013      	ands	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d111      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	3b01      	subs	r3, #1
 8001f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800

08001f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0cc      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d90c      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0b8      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f90:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	494d      	ldr	r1, [pc, #308]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d044      	beq.n	800205c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d119      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e067      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4934      	ldr	r1, [pc, #208]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7ff f942 	bl	80012b4 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff f93e 	bl	80012b4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e04f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d20c      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e032      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 f821 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	490a      	ldr	r1, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	5ccb      	ldrb	r3, [r1, r3]
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f8a2 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	08004088 	.word	0x08004088
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800210c:	b090      	sub	sp, #64	; 0x40
 800210e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
 8002114:	2300      	movs	r3, #0
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_RCC_GetSysClockFreq+0x180>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d00d      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x40>
 800212c:	2b08      	cmp	r3, #8
 800212e:	f200 80a1 	bhi.w	8002274 <HAL_RCC_GetSysClockFreq+0x16c>
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x34>
 8002136:	2b04      	cmp	r3, #4
 8002138:	d003      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x3a>
 800213a:	e09b      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_GetSysClockFreq+0x184>)
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002140:	e09b      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002142:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_GetSysClockFreq+0x188>)
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002146:	e098      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002148:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <HAL_RCC_GetSysClockFreq+0x180>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002152:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_GetSysClockFreq+0x180>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d028      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215e:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <HAL_RCC_GetSysClockFreq+0x180>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	2200      	movs	r2, #0
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	627a      	str	r2, [r7, #36]	; 0x24
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002170:	2100      	movs	r1, #0
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_GetSysClockFreq+0x188>)
 8002174:	fb03 f201 	mul.w	r2, r3, r1
 8002178:	2300      	movs	r3, #0
 800217a:	fb00 f303 	mul.w	r3, r0, r3
 800217e:	4413      	add	r3, r2
 8002180:	4a43      	ldr	r2, [pc, #268]	; (8002290 <HAL_RCC_GetSysClockFreq+0x188>)
 8002182:	fba0 1202 	umull	r1, r2, r0, r2
 8002186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002188:	460a      	mov	r2, r1
 800218a:	62ba      	str	r2, [r7, #40]	; 0x28
 800218c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800218e:	4413      	add	r3, r2
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	2200      	movs	r2, #0
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	61fa      	str	r2, [r7, #28]
 800219a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021a2:	f7fe f87d 	bl	80002a0 <__aeabi_uldivmod>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4613      	mov	r3, r2
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ae:	e053      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	2200      	movs	r2, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	617a      	str	r2, [r7, #20]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021c2:	f04f 0b00 	mov.w	fp, #0
 80021c6:	4652      	mov	r2, sl
 80021c8:	465b      	mov	r3, fp
 80021ca:	f04f 0000 	mov.w	r0, #0
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	0159      	lsls	r1, r3, #5
 80021d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d8:	0150      	lsls	r0, r2, #5
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ebb2 080a 	subs.w	r8, r2, sl
 80021e2:	eb63 090b 	sbc.w	r9, r3, fp
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021fa:	ebb2 0408 	subs.w	r4, r2, r8
 80021fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	00eb      	lsls	r3, r5, #3
 800220c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002210:	00e2      	lsls	r2, r4, #3
 8002212:	4614      	mov	r4, r2
 8002214:	461d      	mov	r5, r3
 8002216:	eb14 030a 	adds.w	r3, r4, sl
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	eb45 030b 	adc.w	r3, r5, fp
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222e:	4629      	mov	r1, r5
 8002230:	028b      	lsls	r3, r1, #10
 8002232:	4621      	mov	r1, r4
 8002234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002238:	4621      	mov	r1, r4
 800223a:	028a      	lsls	r2, r1, #10
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	2200      	movs	r2, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	60fa      	str	r2, [r7, #12]
 8002248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800224c:	f7fe f828 	bl	80002a0 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_GetSysClockFreq+0x180>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetSysClockFreq+0x184>)
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800227c:	4618      	mov	r0, r3
 800227e:	3740      	adds	r7, #64	; 0x40
 8002280:	46bd      	mov	sp, r7
 8002282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	00f42400 	.word	0x00f42400
 8002290:	017d7840 	.word	0x017d7840

08002294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000000 	.word	0x20000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022b0:	f7ff fff0 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0a9b      	lsrs	r3, r3, #10
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08004098 	.word	0x08004098

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022d8:	f7ff ffdc 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0b5b      	lsrs	r3, r3, #13
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08004098 	.word	0x08004098

080022fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e03f      	b.n	800238e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fee6 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 ff5f 	bl	8003204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b08a      	sub	sp, #40	; 0x28
 800239a:	af02      	add	r7, sp, #8
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d17c      	bne.n	80024b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_UART_Transmit+0x2c>
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e075      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Transmit+0x3e>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e06e      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2221      	movs	r2, #33	; 0x21
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ea:	f7fe ff63 	bl	80012b4 <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	88fa      	ldrh	r2, [r7, #6]
 80023fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002404:	d108      	bne.n	8002418 <HAL_UART_Transmit+0x82>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e003      	b.n	8002420 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002428:	e02a      	b.n	8002480 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fc9f 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e036      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	3302      	adds	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	e007      	b.n	8002472 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3301      	adds	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1cf      	bne.n	800242a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fc6f 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08a      	sub	sp, #40	; 0x28
 80024be:	af02      	add	r7, sp, #8
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	f040 808c 	bne.w	80025f4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_UART_Receive+0x2e>
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e084      	b.n	80025f6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Receive+0x40>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e07d      	b.n	80025f6 <HAL_UART_Receive+0x13c>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2222      	movs	r2, #34	; 0x22
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002516:	f7fe fecd 	bl	80012b4 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002530:	d108      	bne.n	8002544 <HAL_UART_Receive+0x8a>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d104      	bne.n	8002544 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	e003      	b.n	800254c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002554:	e043      	b.n	80025de <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	2120      	movs	r1, #32
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fc09 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e042      	b.n	80025f6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002582:	b29a      	uxth	r2, r3
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3302      	adds	r3, #2
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	e01f      	b.n	80025d0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002598:	d007      	beq.n	80025aa <HAL_UART_Receive+0xf0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_UART_Receive+0xfe>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e008      	b.n	80025ca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1b6      	bne.n	8002556 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	d130      	bne.n	800267a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_UART_Transmit_IT+0x26>
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e029      	b.n	800267c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_UART_Transmit_IT+0x38>
 8002632:	2302      	movs	r3, #2
 8002634:	e022      	b.n	800267c <HAL_UART_Transmit_IT+0x7e>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2221      	movs	r2, #33	; 0x21
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002674:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d11d      	bne.n	80026de <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_UART_Receive_IT+0x26>
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e016      	b.n	80026e0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Receive_IT+0x38>
 80026bc:	2302      	movs	r3, #2
 80026be:	e00f      	b.n	80026e0 <HAL_UART_Receive_IT+0x58>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fbbd 	bl	8002e54 <UART_Start_Receive_IT>
 80026da:	4603      	mov	r3, r0
 80026dc:	e000      	b.n	80026e0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b09a      	sub	sp, #104	; 0x68
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002706:	667b      	str	r3, [r7, #100]	; 0x64
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002710:	657a      	str	r2, [r7, #84]	; 0x54
 8002712:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002718:	e841 2300 	strex	r3, r2, [r1]
 800271c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e5      	bne.n	80026f0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3314      	adds	r3, #20
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272e:	e853 3f00 	ldrex	r3, [r3]
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	663b      	str	r3, [r7, #96]	; 0x60
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3314      	adds	r3, #20
 8002742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002744:	643a      	str	r2, [r7, #64]	; 0x40
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800274a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e5      	bne.n	8002724 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	2b01      	cmp	r3, #1
 800275e:	d119      	bne.n	8002794 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f023 0310 	bic.w	r3, r3, #16
 8002776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d136      	bne.n	8002810 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3314      	adds	r3, #20
 80027a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	e853 3f00 	ldrex	r3, [r3]
 80027b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c2:	61ba      	str	r2, [r7, #24]
 80027c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	613b      	str	r3, [r7, #16]
   return(result);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e5      	bne.n	80027a2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2200      	movs	r2, #0
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe feb1 	bl	8001552 <HAL_DMA_Abort>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00c      	beq.n	8002810 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ff3b 	bl	8001676 <HAL_DMA_GetError>
 8002800:	4603      	mov	r3, r0
 8002802:	2b20      	cmp	r3, #32
 8002804:	d104      	bne.n	8002810 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2210      	movs	r2, #16
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e00a      	b.n	8002826 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3768      	adds	r7, #104	; 0x68
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0ba      	sub	sp, #232	; 0xe8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800286e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_UART_IRQHandler+0x66>
 8002882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fbfd 	bl	800308e <UART_Receive_IT>
      return;
 8002894:	e256      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80de 	beq.w	8002a5c <HAL_UART_IRQHandler+0x22c>
 80028a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80d1 	beq.w	8002a5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_UART_IRQHandler+0xae>
 80028c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_UART_IRQHandler+0xd2>
 80028ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xf6>
 800290e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d011      	beq.n	8002956 <HAL_UART_IRQHandler+0x126>
 8002932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800293e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0208 	orr.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 81ed 	beq.w	8002d3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_UART_IRQHandler+0x14e>
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fb88 	bl	800308e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <HAL_UART_IRQHandler+0x17a>
 80029a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d04f      	beq.n	8002a4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa90 	bl	8002ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d141      	bne.n	8002a42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1d9      	bne.n	80029be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d013      	beq.n	8002a3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	4a7d      	ldr	r2, [pc, #500]	; (8002c0c <HAL_UART_IRQHandler+0x3dc>)
 8002a18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fe07 	bl	8001632 <HAL_DMA_Abort_IT>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00e      	b.n	8002a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f986 	bl	8002d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e00a      	b.n	8002a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f982 	bl	8002d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	e006      	b.n	8002a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f97e 	bl	8002d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a56:	e170      	b.n	8002d3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	bf00      	nop
    return;
 8002a5a:	e16e      	b.n	8002d3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 814a 	bne.w	8002cfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8143 	beq.w	8002cfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 813c 	beq.w	8002cfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	f040 80b4 	bne.w	8002c10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8140 	beq.w	8002d3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	f080 8139 	bcs.w	8002d3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	f000 8088 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1d9      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b5e:	e841 2300 	strex	r3, r2, [r1]
 8002b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e1      	bne.n	8002b2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3314      	adds	r3, #20
 8002b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e3      	bne.n	8002b6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc2:	f023 0310 	bic.w	r3, r3, #16
 8002bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e3      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fcb0 	bl	8001552 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8ac 	bl	8002d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c08:	e099      	b.n	8002d3e <HAL_UART_IRQHandler+0x50e>
 8002c0a:	bf00      	nop
 8002c0c:	08002f97 	.word	0x08002f97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 808b 	beq.w	8002d42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8086 	beq.w	8002d42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e3      	bne.n	8002c36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c92:	633a      	str	r2, [r7, #48]	; 0x30
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e3      	bne.n	8002c6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0310 	bic.w	r3, r3, #16
 8002cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cd8:	61fa      	str	r2, [r7, #28]
 8002cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e3      	bne.n	8002cb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f834 	bl	8002d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf8:	e023      	b.n	8002d42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_UART_IRQHandler+0x4ea>
 8002d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f953 	bl	8002fbe <UART_Transmit_IT>
    return;
 8002d18:	e014      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00e      	beq.n	8002d44 <HAL_UART_IRQHandler+0x514>
 8002d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f993 	bl	800305e <UART_EndTransmit_IT>
    return;
 8002d38:	e004      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
    return;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
      return;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_UART_IRQHandler+0x514>
      return;
 8002d42:	bf00      	nop
  }
}
 8002d44:	37e8      	adds	r7, #232	; 0xe8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop

08002d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b090      	sub	sp, #64	; 0x40
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d88:	e050      	b.n	8002e2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d04c      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d98:	f7fe fa8c 	bl	80012b4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d241      	bcs.n	8002e2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3314      	adds	r3, #20
 8002de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	613b      	str	r3, [r7, #16]
   return(result);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3314      	adds	r3, #20
 8002dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfc:	623a      	str	r2, [r7, #32]
 8002dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	69f9      	ldr	r1, [r7, #28]
 8002e02:	6a3a      	ldr	r2, [r7, #32]
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e5      	bne.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e00f      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d09f      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3740      	adds	r7, #64	; 0x40
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2222      	movs	r2, #34	; 0x22
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b095      	sub	sp, #84	; 0x54
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef8:	643a      	str	r2, [r7, #64]	; 0x40
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e5      	bne.n	8002ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3314      	adds	r3, #20
 8002f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d119      	bne.n	8002f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 0310 	bic.w	r3, r3, #16
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f68:	61ba      	str	r2, [r7, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	613b      	str	r3, [r7, #16]
   return(result);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f8a:	bf00      	nop
 8002f8c:	3754      	adds	r7, #84	; 0x54
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff fecb 	bl	8002d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b21      	cmp	r3, #33	; 0x21
 8002fd0:	d13e      	bne.n	8003050 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	d114      	bne.n	8003006 <UART_Transmit_IT+0x48>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d110      	bne.n	8003006 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	1c9a      	adds	r2, r3, #2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	621a      	str	r2, [r3, #32]
 8003004:	e008      	b.n	8003018 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6211      	str	r1, [r2, #32]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4619      	mov	r1, r3
 8003026:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10f      	bne.n	800304c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800303a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fcd8 	bl	8000a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b22      	cmp	r3, #34	; 0x22
 80030a0:	f040 80ab 	bne.w	80031fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d117      	bne.n	80030de <UART_Receive_IT+0x50>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d113      	bne.n	80030de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	1c9a      	adds	r2, r3, #2
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
 80030dc:	e026      	b.n	800312c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f0:	d007      	beq.n	8003102 <UART_Receive_IT+0x74>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <UART_Receive_IT+0x82>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e008      	b.n	8003122 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800311c:	b2da      	uxtb	r2, r3
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29b      	uxth	r3, r3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4619      	mov	r1, r3
 800313a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800313c:	2b00      	cmp	r3, #0
 800313e:	d15a      	bne.n	80031f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0220 	bic.w	r2, r2, #32
 800314e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	2b01      	cmp	r3, #1
 800317e:	d135      	bne.n	80031ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	613b      	str	r3, [r7, #16]
   return(result);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f023 0310 	bic.w	r3, r3, #16
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a6:	623a      	str	r2, [r7, #32]
 80031a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	69f9      	ldr	r1, [r7, #28]
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e5      	bne.n	8003186 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d10a      	bne.n	80031de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fdbb 	bl	8002d60 <HAL_UARTEx_RxEventCallback>
 80031ea:	e002      	b.n	80031f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fd fc09 	bl	8000a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e002      	b.n	80031fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3730      	adds	r7, #48	; 0x30
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b0c0      	sub	sp, #256	; 0x100
 800320a:	af00      	add	r7, sp, #0
 800320c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	68d9      	ldr	r1, [r3, #12]
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	ea40 0301 	orr.w	r3, r0, r1
 800322c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	431a      	orrs	r2, r3
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	431a      	orrs	r2, r3
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800325c:	f021 010c 	bic.w	r1, r1, #12
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800326a:	430b      	orrs	r3, r1
 800326c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	6999      	ldr	r1, [r3, #24]
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	ea40 0301 	orr.w	r3, r0, r1
 800328a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b8f      	ldr	r3, [pc, #572]	; (80034d0 <UART_SetConfig+0x2cc>)
 8003294:	429a      	cmp	r2, r3
 8003296:	d005      	beq.n	80032a4 <UART_SetConfig+0xa0>
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b8d      	ldr	r3, [pc, #564]	; (80034d4 <UART_SetConfig+0x2d0>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d104      	bne.n	80032ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff f816 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 80032a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032ac:	e003      	b.n	80032b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ae:	f7fe fffd 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 80032b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	f040 810c 	bne.w	80034dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032d6:	4622      	mov	r2, r4
 80032d8:	462b      	mov	r3, r5
 80032da:	1891      	adds	r1, r2, r2
 80032dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80032de:	415b      	adcs	r3, r3
 80032e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032e6:	4621      	mov	r1, r4
 80032e8:	eb12 0801 	adds.w	r8, r2, r1
 80032ec:	4629      	mov	r1, r5
 80032ee:	eb43 0901 	adc.w	r9, r3, r1
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003306:	4690      	mov	r8, r2
 8003308:	4699      	mov	r9, r3
 800330a:	4623      	mov	r3, r4
 800330c:	eb18 0303 	adds.w	r3, r8, r3
 8003310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003314:	462b      	mov	r3, r5
 8003316:	eb49 0303 	adc.w	r3, r9, r3
 800331a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800332a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800332e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003332:	460b      	mov	r3, r1
 8003334:	18db      	adds	r3, r3, r3
 8003336:	653b      	str	r3, [r7, #80]	; 0x50
 8003338:	4613      	mov	r3, r2
 800333a:	eb42 0303 	adc.w	r3, r2, r3
 800333e:	657b      	str	r3, [r7, #84]	; 0x54
 8003340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003348:	f7fc ffaa 	bl	80002a0 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <UART_SetConfig+0x2d4>)
 8003352:	fba3 2302 	umull	r2, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	011c      	lsls	r4, r3, #4
 800335a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003364:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800336c:	4642      	mov	r2, r8
 800336e:	464b      	mov	r3, r9
 8003370:	1891      	adds	r1, r2, r2
 8003372:	64b9      	str	r1, [r7, #72]	; 0x48
 8003374:	415b      	adcs	r3, r3
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800337c:	4641      	mov	r1, r8
 800337e:	eb12 0a01 	adds.w	sl, r2, r1
 8003382:	4649      	mov	r1, r9
 8003384:	eb43 0b01 	adc.w	fp, r3, r1
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339c:	4692      	mov	sl, r2
 800339e:	469b      	mov	fp, r3
 80033a0:	4643      	mov	r3, r8
 80033a2:	eb1a 0303 	adds.w	r3, sl, r3
 80033a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033aa:	464b      	mov	r3, r9
 80033ac:	eb4b 0303 	adc.w	r3, fp, r3
 80033b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033c8:	460b      	mov	r3, r1
 80033ca:	18db      	adds	r3, r3, r3
 80033cc:	643b      	str	r3, [r7, #64]	; 0x40
 80033ce:	4613      	mov	r3, r2
 80033d0:	eb42 0303 	adc.w	r3, r2, r3
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
 80033d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033de:	f7fc ff5f 	bl	80002a0 <__aeabi_uldivmod>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <UART_SetConfig+0x2d4>)
 80033ea:	fba3 2301 	umull	r2, r3, r3, r1
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2264      	movs	r2, #100	; 0x64
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	1acb      	subs	r3, r1, r3
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033fe:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <UART_SetConfig+0x2d4>)
 8003400:	fba3 2302 	umull	r2, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800340c:	441c      	add	r4, r3
 800340e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003418:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800341c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	63b9      	str	r1, [r7, #56]	; 0x38
 8003428:	415b      	adcs	r3, r3
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003430:	4641      	mov	r1, r8
 8003432:	1851      	adds	r1, r2, r1
 8003434:	6339      	str	r1, [r7, #48]	; 0x30
 8003436:	4649      	mov	r1, r9
 8003438:	414b      	adcs	r3, r1
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003448:	4659      	mov	r1, fp
 800344a:	00cb      	lsls	r3, r1, #3
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003452:	4651      	mov	r1, sl
 8003454:	00ca      	lsls	r2, r1, #3
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	4603      	mov	r3, r0
 800345c:	4642      	mov	r2, r8
 800345e:	189b      	adds	r3, r3, r2
 8003460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003464:	464b      	mov	r3, r9
 8003466:	460a      	mov	r2, r1
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800347c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003484:	460b      	mov	r3, r1
 8003486:	18db      	adds	r3, r3, r3
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
 800348a:	4613      	mov	r3, r2
 800348c:	eb42 0303 	adc.w	r3, r2, r3
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800349a:	f7fc ff01 	bl	80002a0 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <UART_SetConfig+0x2d4>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	2164      	movs	r1, #100	; 0x64
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	3332      	adds	r3, #50	; 0x32
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <UART_SetConfig+0x2d4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	f003 0207 	and.w	r2, r3, #7
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4422      	add	r2, r4
 80034ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034cc:	e105      	b.n	80036da <UART_SetConfig+0x4d6>
 80034ce:	bf00      	nop
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034ee:	4642      	mov	r2, r8
 80034f0:	464b      	mov	r3, r9
 80034f2:	1891      	adds	r1, r2, r2
 80034f4:	6239      	str	r1, [r7, #32]
 80034f6:	415b      	adcs	r3, r3
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034fe:	4641      	mov	r1, r8
 8003500:	1854      	adds	r4, r2, r1
 8003502:	4649      	mov	r1, r9
 8003504:	eb43 0501 	adc.w	r5, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	00eb      	lsls	r3, r5, #3
 8003512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003516:	00e2      	lsls	r2, r4, #3
 8003518:	4614      	mov	r4, r2
 800351a:	461d      	mov	r5, r3
 800351c:	4643      	mov	r3, r8
 800351e:	18e3      	adds	r3, r4, r3
 8003520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003524:	464b      	mov	r3, r9
 8003526:	eb45 0303 	adc.w	r3, r5, r3
 800352a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800353a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800354a:	4629      	mov	r1, r5
 800354c:	008b      	lsls	r3, r1, #2
 800354e:	4621      	mov	r1, r4
 8003550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003554:	4621      	mov	r1, r4
 8003556:	008a      	lsls	r2, r1, #2
 8003558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800355c:	f7fc fea0 	bl	80002a0 <__aeabi_uldivmod>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4b60      	ldr	r3, [pc, #384]	; (80036e8 <UART_SetConfig+0x4e4>)
 8003566:	fba3 2302 	umull	r2, r3, r3, r2
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	011c      	lsls	r4, r3, #4
 800356e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003578:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800357c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	1891      	adds	r1, r2, r2
 8003586:	61b9      	str	r1, [r7, #24]
 8003588:	415b      	adcs	r3, r3
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003590:	4641      	mov	r1, r8
 8003592:	1851      	adds	r1, r2, r1
 8003594:	6139      	str	r1, [r7, #16]
 8003596:	4649      	mov	r1, r9
 8003598:	414b      	adcs	r3, r1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035a8:	4659      	mov	r1, fp
 80035aa:	00cb      	lsls	r3, r1, #3
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b2:	4651      	mov	r1, sl
 80035b4:	00ca      	lsls	r2, r1, #3
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	4642      	mov	r2, r8
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035c4:	464b      	mov	r3, r9
 80035c6:	460a      	mov	r2, r1
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035e8:	4649      	mov	r1, r9
 80035ea:	008b      	lsls	r3, r1, #2
 80035ec:	4641      	mov	r1, r8
 80035ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f2:	4641      	mov	r1, r8
 80035f4:	008a      	lsls	r2, r1, #2
 80035f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035fa:	f7fc fe51 	bl	80002a0 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <UART_SetConfig+0x4e4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	3332      	adds	r3, #50	; 0x32
 8003616:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <UART_SetConfig+0x4e4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003622:	441c      	add	r4, r3
 8003624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003628:	2200      	movs	r2, #0
 800362a:	673b      	str	r3, [r7, #112]	; 0x70
 800362c:	677a      	str	r2, [r7, #116]	; 0x74
 800362e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003632:	4642      	mov	r2, r8
 8003634:	464b      	mov	r3, r9
 8003636:	1891      	adds	r1, r2, r2
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	415b      	adcs	r3, r3
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003642:	4641      	mov	r1, r8
 8003644:	1851      	adds	r1, r2, r1
 8003646:	6039      	str	r1, [r7, #0]
 8003648:	4649      	mov	r1, r9
 800364a:	414b      	adcs	r3, r1
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800365a:	4659      	mov	r1, fp
 800365c:	00cb      	lsls	r3, r1, #3
 800365e:	4651      	mov	r1, sl
 8003660:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003664:	4651      	mov	r1, sl
 8003666:	00ca      	lsls	r2, r1, #3
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	4603      	mov	r3, r0
 800366e:	4642      	mov	r2, r8
 8003670:	189b      	adds	r3, r3, r2
 8003672:	66bb      	str	r3, [r7, #104]	; 0x68
 8003674:	464b      	mov	r3, r9
 8003676:	460a      	mov	r2, r1
 8003678:	eb42 0303 	adc.w	r3, r2, r3
 800367c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
 8003688:	667a      	str	r2, [r7, #100]	; 0x64
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003696:	4649      	mov	r1, r9
 8003698:	008b      	lsls	r3, r1, #2
 800369a:	4641      	mov	r1, r8
 800369c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a0:	4641      	mov	r1, r8
 80036a2:	008a      	lsls	r2, r1, #2
 80036a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036a8:	f7fc fdfa 	bl	80002a0 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <UART_SetConfig+0x4e4>)
 80036b2:	fba3 1302 	umull	r1, r3, r3, r2
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2164      	movs	r1, #100	; 0x64
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	3332      	adds	r3, #50	; 0x32
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <UART_SetConfig+0x4e4>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	f003 020f 	and.w	r2, r3, #15
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4422      	add	r2, r4
 80036d8:	609a      	str	r2, [r3, #8]
}
 80036da:	bf00      	nop
 80036dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036e0:	46bd      	mov	sp, r7
 80036e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036e6:	bf00      	nop
 80036e8:	51eb851f 	.word	0x51eb851f

080036ec <__errno>:
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <__errno+0x8>)
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	2000000c 	.word	0x2000000c

080036f8 <__libc_init_array>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4d0d      	ldr	r5, [pc, #52]	; (8003730 <__libc_init_array+0x38>)
 80036fc:	4c0d      	ldr	r4, [pc, #52]	; (8003734 <__libc_init_array+0x3c>)
 80036fe:	1b64      	subs	r4, r4, r5
 8003700:	10a4      	asrs	r4, r4, #2
 8003702:	2600      	movs	r6, #0
 8003704:	42a6      	cmp	r6, r4
 8003706:	d109      	bne.n	800371c <__libc_init_array+0x24>
 8003708:	4d0b      	ldr	r5, [pc, #44]	; (8003738 <__libc_init_array+0x40>)
 800370a:	4c0c      	ldr	r4, [pc, #48]	; (800373c <__libc_init_array+0x44>)
 800370c:	f000 fc96 	bl	800403c <_init>
 8003710:	1b64      	subs	r4, r4, r5
 8003712:	10a4      	asrs	r4, r4, #2
 8003714:	2600      	movs	r6, #0
 8003716:	42a6      	cmp	r6, r4
 8003718:	d105      	bne.n	8003726 <__libc_init_array+0x2e>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003720:	4798      	blx	r3
 8003722:	3601      	adds	r6, #1
 8003724:	e7ee      	b.n	8003704 <__libc_init_array+0xc>
 8003726:	f855 3b04 	ldr.w	r3, [r5], #4
 800372a:	4798      	blx	r3
 800372c:	3601      	adds	r6, #1
 800372e:	e7f2      	b.n	8003716 <__libc_init_array+0x1e>
 8003730:	08004240 	.word	0x08004240
 8003734:	08004240 	.word	0x08004240
 8003738:	08004240 	.word	0x08004240
 800373c:	08004244 	.word	0x08004244

08003740 <__retarget_lock_acquire_recursive>:
 8003740:	4770      	bx	lr

08003742 <__retarget_lock_release_recursive>:
 8003742:	4770      	bx	lr

08003744 <memset>:
 8003744:	4402      	add	r2, r0
 8003746:	4603      	mov	r3, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <sbrk_aligned>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4e0e      	ldr	r6, [pc, #56]	; (8003790 <sbrk_aligned+0x3c>)
 8003758:	460c      	mov	r4, r1
 800375a:	6831      	ldr	r1, [r6, #0]
 800375c:	4605      	mov	r5, r0
 800375e:	b911      	cbnz	r1, 8003766 <sbrk_aligned+0x12>
 8003760:	f000 f88c 	bl	800387c <_sbrk_r>
 8003764:	6030      	str	r0, [r6, #0]
 8003766:	4621      	mov	r1, r4
 8003768:	4628      	mov	r0, r5
 800376a:	f000 f887 	bl	800387c <_sbrk_r>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d00a      	beq.n	8003788 <sbrk_aligned+0x34>
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d007      	beq.n	800378c <sbrk_aligned+0x38>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4628      	mov	r0, r5
 8003780:	f000 f87c 	bl	800387c <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d101      	bne.n	800378c <sbrk_aligned+0x38>
 8003788:	f04f 34ff 	mov.w	r4, #4294967295
 800378c:	4620      	mov	r0, r4
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	200008f8 	.word	0x200008f8

08003794 <_malloc_r>:
 8003794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003798:	1ccd      	adds	r5, r1, #3
 800379a:	f025 0503 	bic.w	r5, r5, #3
 800379e:	3508      	adds	r5, #8
 80037a0:	2d0c      	cmp	r5, #12
 80037a2:	bf38      	it	cc
 80037a4:	250c      	movcc	r5, #12
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	4607      	mov	r7, r0
 80037aa:	db01      	blt.n	80037b0 <_malloc_r+0x1c>
 80037ac:	42a9      	cmp	r1, r5
 80037ae:	d905      	bls.n	80037bc <_malloc_r+0x28>
 80037b0:	230c      	movs	r3, #12
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	2600      	movs	r6, #0
 80037b6:	4630      	mov	r0, r6
 80037b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037bc:	4e2e      	ldr	r6, [pc, #184]	; (8003878 <_malloc_r+0xe4>)
 80037be:	f000 f895 	bl	80038ec <__malloc_lock>
 80037c2:	6833      	ldr	r3, [r6, #0]
 80037c4:	461c      	mov	r4, r3
 80037c6:	bb34      	cbnz	r4, 8003816 <_malloc_r+0x82>
 80037c8:	4629      	mov	r1, r5
 80037ca:	4638      	mov	r0, r7
 80037cc:	f7ff ffc2 	bl	8003754 <sbrk_aligned>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	4604      	mov	r4, r0
 80037d4:	d14d      	bne.n	8003872 <_malloc_r+0xde>
 80037d6:	6834      	ldr	r4, [r6, #0]
 80037d8:	4626      	mov	r6, r4
 80037da:	2e00      	cmp	r6, #0
 80037dc:	d140      	bne.n	8003860 <_malloc_r+0xcc>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	4631      	mov	r1, r6
 80037e2:	4638      	mov	r0, r7
 80037e4:	eb04 0803 	add.w	r8, r4, r3
 80037e8:	f000 f848 	bl	800387c <_sbrk_r>
 80037ec:	4580      	cmp	r8, r0
 80037ee:	d13a      	bne.n	8003866 <_malloc_r+0xd2>
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	3503      	adds	r5, #3
 80037f4:	1a6d      	subs	r5, r5, r1
 80037f6:	f025 0503 	bic.w	r5, r5, #3
 80037fa:	3508      	adds	r5, #8
 80037fc:	2d0c      	cmp	r5, #12
 80037fe:	bf38      	it	cc
 8003800:	250c      	movcc	r5, #12
 8003802:	4629      	mov	r1, r5
 8003804:	4638      	mov	r0, r7
 8003806:	f7ff ffa5 	bl	8003754 <sbrk_aligned>
 800380a:	3001      	adds	r0, #1
 800380c:	d02b      	beq.n	8003866 <_malloc_r+0xd2>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	442b      	add	r3, r5
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	e00e      	b.n	8003834 <_malloc_r+0xa0>
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	1b52      	subs	r2, r2, r5
 800381a:	d41e      	bmi.n	800385a <_malloc_r+0xc6>
 800381c:	2a0b      	cmp	r2, #11
 800381e:	d916      	bls.n	800384e <_malloc_r+0xba>
 8003820:	1961      	adds	r1, r4, r5
 8003822:	42a3      	cmp	r3, r4
 8003824:	6025      	str	r5, [r4, #0]
 8003826:	bf18      	it	ne
 8003828:	6059      	strne	r1, [r3, #4]
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	bf08      	it	eq
 800382e:	6031      	streq	r1, [r6, #0]
 8003830:	5162      	str	r2, [r4, r5]
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	4638      	mov	r0, r7
 8003836:	f104 060b 	add.w	r6, r4, #11
 800383a:	f000 f85d 	bl	80038f8 <__malloc_unlock>
 800383e:	f026 0607 	bic.w	r6, r6, #7
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	1af2      	subs	r2, r6, r3
 8003846:	d0b6      	beq.n	80037b6 <_malloc_r+0x22>
 8003848:	1b9b      	subs	r3, r3, r6
 800384a:	50a3      	str	r3, [r4, r2]
 800384c:	e7b3      	b.n	80037b6 <_malloc_r+0x22>
 800384e:	6862      	ldr	r2, [r4, #4]
 8003850:	42a3      	cmp	r3, r4
 8003852:	bf0c      	ite	eq
 8003854:	6032      	streq	r2, [r6, #0]
 8003856:	605a      	strne	r2, [r3, #4]
 8003858:	e7ec      	b.n	8003834 <_malloc_r+0xa0>
 800385a:	4623      	mov	r3, r4
 800385c:	6864      	ldr	r4, [r4, #4]
 800385e:	e7b2      	b.n	80037c6 <_malloc_r+0x32>
 8003860:	4634      	mov	r4, r6
 8003862:	6876      	ldr	r6, [r6, #4]
 8003864:	e7b9      	b.n	80037da <_malloc_r+0x46>
 8003866:	230c      	movs	r3, #12
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4638      	mov	r0, r7
 800386c:	f000 f844 	bl	80038f8 <__malloc_unlock>
 8003870:	e7a1      	b.n	80037b6 <_malloc_r+0x22>
 8003872:	6025      	str	r5, [r4, #0]
 8003874:	e7de      	b.n	8003834 <_malloc_r+0xa0>
 8003876:	bf00      	nop
 8003878:	200008f4 	.word	0x200008f4

0800387c <_sbrk_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4d06      	ldr	r5, [pc, #24]	; (8003898 <_sbrk_r+0x1c>)
 8003880:	2300      	movs	r3, #0
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	f7fd fbc2 	bl	8001010 <_sbrk>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_sbrk_r+0x1a>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_sbrk_r+0x1a>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	200008fc 	.word	0x200008fc

0800389c <siprintf>:
 800389c:	b40e      	push	{r1, r2, r3}
 800389e:	b500      	push	{lr}
 80038a0:	b09c      	sub	sp, #112	; 0x70
 80038a2:	ab1d      	add	r3, sp, #116	; 0x74
 80038a4:	9002      	str	r0, [sp, #8]
 80038a6:	9006      	str	r0, [sp, #24]
 80038a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038ac:	4809      	ldr	r0, [pc, #36]	; (80038d4 <siprintf+0x38>)
 80038ae:	9107      	str	r1, [sp, #28]
 80038b0:	9104      	str	r1, [sp, #16]
 80038b2:	4909      	ldr	r1, [pc, #36]	; (80038d8 <siprintf+0x3c>)
 80038b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038b8:	9105      	str	r1, [sp, #20]
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	a902      	add	r1, sp, #8
 80038c0:	f000 f8c8 	bl	8003a54 <_svfiprintf_r>
 80038c4:	9b02      	ldr	r3, [sp, #8]
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	b01c      	add	sp, #112	; 0x70
 80038cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d0:	b003      	add	sp, #12
 80038d2:	4770      	bx	lr
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	ffff0208 	.word	0xffff0208

080038dc <strcpy>:
 80038dc:	4603      	mov	r3, r0
 80038de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038e2:	f803 2b01 	strb.w	r2, [r3], #1
 80038e6:	2a00      	cmp	r2, #0
 80038e8:	d1f9      	bne.n	80038de <strcpy+0x2>
 80038ea:	4770      	bx	lr

080038ec <__malloc_lock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__malloc_lock+0x8>)
 80038ee:	f7ff bf27 	b.w	8003740 <__retarget_lock_acquire_recursive>
 80038f2:	bf00      	nop
 80038f4:	200008f0 	.word	0x200008f0

080038f8 <__malloc_unlock>:
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <__malloc_unlock+0x8>)
 80038fa:	f7ff bf22 	b.w	8003742 <__retarget_lock_release_recursive>
 80038fe:	bf00      	nop
 8003900:	200008f0 	.word	0x200008f0

08003904 <_free_r>:
 8003904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003906:	2900      	cmp	r1, #0
 8003908:	d044      	beq.n	8003994 <_free_r+0x90>
 800390a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390e:	9001      	str	r0, [sp, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f1a1 0404 	sub.w	r4, r1, #4
 8003916:	bfb8      	it	lt
 8003918:	18e4      	addlt	r4, r4, r3
 800391a:	f7ff ffe7 	bl	80038ec <__malloc_lock>
 800391e:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <_free_r+0x94>)
 8003920:	9801      	ldr	r0, [sp, #4]
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	b933      	cbnz	r3, 8003934 <_free_r+0x30>
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	6014      	str	r4, [r2, #0]
 800392a:	b003      	add	sp, #12
 800392c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003930:	f7ff bfe2 	b.w	80038f8 <__malloc_unlock>
 8003934:	42a3      	cmp	r3, r4
 8003936:	d908      	bls.n	800394a <_free_r+0x46>
 8003938:	6825      	ldr	r5, [r4, #0]
 800393a:	1961      	adds	r1, r4, r5
 800393c:	428b      	cmp	r3, r1
 800393e:	bf01      	itttt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	1949      	addeq	r1, r1, r5
 8003946:	6021      	streq	r1, [r4, #0]
 8003948:	e7ed      	b.n	8003926 <_free_r+0x22>
 800394a:	461a      	mov	r2, r3
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b10b      	cbz	r3, 8003954 <_free_r+0x50>
 8003950:	42a3      	cmp	r3, r4
 8003952:	d9fa      	bls.n	800394a <_free_r+0x46>
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	1855      	adds	r5, r2, r1
 8003958:	42a5      	cmp	r5, r4
 800395a:	d10b      	bne.n	8003974 <_free_r+0x70>
 800395c:	6824      	ldr	r4, [r4, #0]
 800395e:	4421      	add	r1, r4
 8003960:	1854      	adds	r4, r2, r1
 8003962:	42a3      	cmp	r3, r4
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	d1e0      	bne.n	800392a <_free_r+0x26>
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	6053      	str	r3, [r2, #4]
 800396e:	4421      	add	r1, r4
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	e7da      	b.n	800392a <_free_r+0x26>
 8003974:	d902      	bls.n	800397c <_free_r+0x78>
 8003976:	230c      	movs	r3, #12
 8003978:	6003      	str	r3, [r0, #0]
 800397a:	e7d6      	b.n	800392a <_free_r+0x26>
 800397c:	6825      	ldr	r5, [r4, #0]
 800397e:	1961      	adds	r1, r4, r5
 8003980:	428b      	cmp	r3, r1
 8003982:	bf04      	itt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	6063      	str	r3, [r4, #4]
 800398a:	bf04      	itt	eq
 800398c:	1949      	addeq	r1, r1, r5
 800398e:	6021      	streq	r1, [r4, #0]
 8003990:	6054      	str	r4, [r2, #4]
 8003992:	e7ca      	b.n	800392a <_free_r+0x26>
 8003994:	b003      	add	sp, #12
 8003996:	bd30      	pop	{r4, r5, pc}
 8003998:	200008f4 	.word	0x200008f4

0800399c <__ssputs_r>:
 800399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a0:	688e      	ldr	r6, [r1, #8]
 80039a2:	429e      	cmp	r6, r3
 80039a4:	4682      	mov	sl, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	4690      	mov	r8, r2
 80039aa:	461f      	mov	r7, r3
 80039ac:	d838      	bhi.n	8003a20 <__ssputs_r+0x84>
 80039ae:	898a      	ldrh	r2, [r1, #12]
 80039b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039b4:	d032      	beq.n	8003a1c <__ssputs_r+0x80>
 80039b6:	6825      	ldr	r5, [r4, #0]
 80039b8:	6909      	ldr	r1, [r1, #16]
 80039ba:	eba5 0901 	sub.w	r9, r5, r1
 80039be:	6965      	ldr	r5, [r4, #20]
 80039c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039c8:	3301      	adds	r3, #1
 80039ca:	444b      	add	r3, r9
 80039cc:	106d      	asrs	r5, r5, #1
 80039ce:	429d      	cmp	r5, r3
 80039d0:	bf38      	it	cc
 80039d2:	461d      	movcc	r5, r3
 80039d4:	0553      	lsls	r3, r2, #21
 80039d6:	d531      	bpl.n	8003a3c <__ssputs_r+0xa0>
 80039d8:	4629      	mov	r1, r5
 80039da:	f7ff fedb 	bl	8003794 <_malloc_r>
 80039de:	4606      	mov	r6, r0
 80039e0:	b950      	cbnz	r0, 80039f8 <__ssputs_r+0x5c>
 80039e2:	230c      	movs	r3, #12
 80039e4:	f8ca 3000 	str.w	r3, [sl]
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ee:	81a3      	strh	r3, [r4, #12]
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	6921      	ldr	r1, [r4, #16]
 80039fa:	464a      	mov	r2, r9
 80039fc:	f000 fabe 	bl	8003f7c <memcpy>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	6126      	str	r6, [r4, #16]
 8003a0e:	6165      	str	r5, [r4, #20]
 8003a10:	444e      	add	r6, r9
 8003a12:	eba5 0509 	sub.w	r5, r5, r9
 8003a16:	6026      	str	r6, [r4, #0]
 8003a18:	60a5      	str	r5, [r4, #8]
 8003a1a:	463e      	mov	r6, r7
 8003a1c:	42be      	cmp	r6, r7
 8003a1e:	d900      	bls.n	8003a22 <__ssputs_r+0x86>
 8003a20:	463e      	mov	r6, r7
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	4632      	mov	r2, r6
 8003a26:	4641      	mov	r1, r8
 8003a28:	f000 fab6 	bl	8003f98 <memmove>
 8003a2c:	68a3      	ldr	r3, [r4, #8]
 8003a2e:	1b9b      	subs	r3, r3, r6
 8003a30:	60a3      	str	r3, [r4, #8]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	4433      	add	r3, r6
 8003a36:	6023      	str	r3, [r4, #0]
 8003a38:	2000      	movs	r0, #0
 8003a3a:	e7db      	b.n	80039f4 <__ssputs_r+0x58>
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	f000 fac5 	bl	8003fcc <_realloc_r>
 8003a42:	4606      	mov	r6, r0
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1e1      	bne.n	8003a0c <__ssputs_r+0x70>
 8003a48:	6921      	ldr	r1, [r4, #16]
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	f7ff ff5a 	bl	8003904 <_free_r>
 8003a50:	e7c7      	b.n	80039e2 <__ssputs_r+0x46>
	...

08003a54 <_svfiprintf_r>:
 8003a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a58:	4698      	mov	r8, r3
 8003a5a:	898b      	ldrh	r3, [r1, #12]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	b09d      	sub	sp, #116	; 0x74
 8003a60:	4607      	mov	r7, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	4614      	mov	r4, r2
 8003a66:	d50e      	bpl.n	8003a86 <_svfiprintf_r+0x32>
 8003a68:	690b      	ldr	r3, [r1, #16]
 8003a6a:	b963      	cbnz	r3, 8003a86 <_svfiprintf_r+0x32>
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	f7ff fe91 	bl	8003794 <_malloc_r>
 8003a72:	6028      	str	r0, [r5, #0]
 8003a74:	6128      	str	r0, [r5, #16]
 8003a76:	b920      	cbnz	r0, 8003a82 <_svfiprintf_r+0x2e>
 8003a78:	230c      	movs	r3, #12
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e0d1      	b.n	8003c26 <_svfiprintf_r+0x1d2>
 8003a82:	2340      	movs	r3, #64	; 0x40
 8003a84:	616b      	str	r3, [r5, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a94:	2330      	movs	r3, #48	; 0x30
 8003a96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c40 <_svfiprintf_r+0x1ec>
 8003a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a9e:	f04f 0901 	mov.w	r9, #1
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	469a      	mov	sl, r3
 8003aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aaa:	b10a      	cbz	r2, 8003ab0 <_svfiprintf_r+0x5c>
 8003aac:	2a25      	cmp	r2, #37	; 0x25
 8003aae:	d1f9      	bne.n	8003aa4 <_svfiprintf_r+0x50>
 8003ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab4:	d00b      	beq.n	8003ace <_svfiprintf_r+0x7a>
 8003ab6:	465b      	mov	r3, fp
 8003ab8:	4622      	mov	r2, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7ff ff6d 	bl	800399c <__ssputs_r>
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	f000 80aa 	beq.w	8003c1c <_svfiprintf_r+0x1c8>
 8003ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aca:	445a      	add	r2, fp
 8003acc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ace:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a2 	beq.w	8003c1c <_svfiprintf_r+0x1c8>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae2:	f10a 0a01 	add.w	sl, sl, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	9307      	str	r3, [sp, #28]
 8003aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aee:	931a      	str	r3, [sp, #104]	; 0x68
 8003af0:	4654      	mov	r4, sl
 8003af2:	2205      	movs	r2, #5
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	4851      	ldr	r0, [pc, #324]	; (8003c40 <_svfiprintf_r+0x1ec>)
 8003afa:	f7fc fb81 	bl	8000200 <memchr>
 8003afe:	9a04      	ldr	r2, [sp, #16]
 8003b00:	b9d8      	cbnz	r0, 8003b3a <_svfiprintf_r+0xe6>
 8003b02:	06d0      	lsls	r0, r2, #27
 8003b04:	bf44      	itt	mi
 8003b06:	2320      	movmi	r3, #32
 8003b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0c:	0711      	lsls	r1, r2, #28
 8003b0e:	bf44      	itt	mi
 8003b10:	232b      	movmi	r3, #43	; 0x2b
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1c:	d015      	beq.n	8003b4a <_svfiprintf_r+0xf6>
 8003b1e:	9a07      	ldr	r2, [sp, #28]
 8003b20:	4654      	mov	r4, sl
 8003b22:	2000      	movs	r0, #0
 8003b24:	f04f 0c0a 	mov.w	ip, #10
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b2e:	3b30      	subs	r3, #48	; 0x30
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d94e      	bls.n	8003bd2 <_svfiprintf_r+0x17e>
 8003b34:	b1b0      	cbz	r0, 8003b64 <_svfiprintf_r+0x110>
 8003b36:	9207      	str	r2, [sp, #28]
 8003b38:	e014      	b.n	8003b64 <_svfiprintf_r+0x110>
 8003b3a:	eba0 0308 	sub.w	r3, r0, r8
 8003b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b42:	4313      	orrs	r3, r2
 8003b44:	9304      	str	r3, [sp, #16]
 8003b46:	46a2      	mov	sl, r4
 8003b48:	e7d2      	b.n	8003af0 <_svfiprintf_r+0x9c>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	1d19      	adds	r1, r3, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	9103      	str	r1, [sp, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbb      	ittet	lt
 8003b56:	425b      	neglt	r3, r3
 8003b58:	f042 0202 	orrlt.w	r2, r2, #2
 8003b5c:	9307      	strge	r3, [sp, #28]
 8003b5e:	9307      	strlt	r3, [sp, #28]
 8003b60:	bfb8      	it	lt
 8003b62:	9204      	strlt	r2, [sp, #16]
 8003b64:	7823      	ldrb	r3, [r4, #0]
 8003b66:	2b2e      	cmp	r3, #46	; 0x2e
 8003b68:	d10c      	bne.n	8003b84 <_svfiprintf_r+0x130>
 8003b6a:	7863      	ldrb	r3, [r4, #1]
 8003b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6e:	d135      	bne.n	8003bdc <_svfiprintf_r+0x188>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	9203      	str	r2, [sp, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bfb8      	it	lt
 8003b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b80:	3402      	adds	r4, #2
 8003b82:	9305      	str	r3, [sp, #20]
 8003b84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c50 <_svfiprintf_r+0x1fc>
 8003b88:	7821      	ldrb	r1, [r4, #0]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	f7fc fb37 	bl	8000200 <memchr>
 8003b92:	b140      	cbz	r0, 8003ba6 <_svfiprintf_r+0x152>
 8003b94:	2340      	movs	r3, #64	; 0x40
 8003b96:	eba0 000a 	sub.w	r0, r0, sl
 8003b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b9e:	9b04      	ldr	r3, [sp, #16]
 8003ba0:	4303      	orrs	r3, r0
 8003ba2:	3401      	adds	r4, #1
 8003ba4:	9304      	str	r3, [sp, #16]
 8003ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003baa:	4826      	ldr	r0, [pc, #152]	; (8003c44 <_svfiprintf_r+0x1f0>)
 8003bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb0:	2206      	movs	r2, #6
 8003bb2:	f7fc fb25 	bl	8000200 <memchr>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d038      	beq.n	8003c2c <_svfiprintf_r+0x1d8>
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <_svfiprintf_r+0x1f4>)
 8003bbc:	bb1b      	cbnz	r3, 8003c06 <_svfiprintf_r+0x1b2>
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	3307      	adds	r3, #7
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bcc:	4433      	add	r3, r6
 8003bce:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd0:	e767      	b.n	8003aa2 <_svfiprintf_r+0x4e>
 8003bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	2001      	movs	r0, #1
 8003bda:	e7a5      	b.n	8003b28 <_svfiprintf_r+0xd4>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	3401      	adds	r4, #1
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	4619      	mov	r1, r3
 8003be4:	f04f 0c0a 	mov.w	ip, #10
 8003be8:	4620      	mov	r0, r4
 8003bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bee:	3a30      	subs	r2, #48	; 0x30
 8003bf0:	2a09      	cmp	r2, #9
 8003bf2:	d903      	bls.n	8003bfc <_svfiprintf_r+0x1a8>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0c5      	beq.n	8003b84 <_svfiprintf_r+0x130>
 8003bf8:	9105      	str	r1, [sp, #20]
 8003bfa:	e7c3      	b.n	8003b84 <_svfiprintf_r+0x130>
 8003bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c00:	4604      	mov	r4, r0
 8003c02:	2301      	movs	r3, #1
 8003c04:	e7f0      	b.n	8003be8 <_svfiprintf_r+0x194>
 8003c06:	ab03      	add	r3, sp, #12
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	462a      	mov	r2, r5
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <_svfiprintf_r+0x1f8>)
 8003c0e:	a904      	add	r1, sp, #16
 8003c10:	4638      	mov	r0, r7
 8003c12:	f3af 8000 	nop.w
 8003c16:	1c42      	adds	r2, r0, #1
 8003c18:	4606      	mov	r6, r0
 8003c1a:	d1d6      	bne.n	8003bca <_svfiprintf_r+0x176>
 8003c1c:	89ab      	ldrh	r3, [r5, #12]
 8003c1e:	065b      	lsls	r3, r3, #25
 8003c20:	f53f af2c 	bmi.w	8003a7c <_svfiprintf_r+0x28>
 8003c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c26:	b01d      	add	sp, #116	; 0x74
 8003c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	ab03      	add	r3, sp, #12
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	462a      	mov	r2, r5
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <_svfiprintf_r+0x1f8>)
 8003c34:	a904      	add	r1, sp, #16
 8003c36:	4638      	mov	r0, r7
 8003c38:	f000 f87a 	bl	8003d30 <_printf_i>
 8003c3c:	e7eb      	b.n	8003c16 <_svfiprintf_r+0x1c2>
 8003c3e:	bf00      	nop
 8003c40:	08004204 	.word	0x08004204
 8003c44:	0800420e 	.word	0x0800420e
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	0800399d 	.word	0x0800399d
 8003c50:	0800420a 	.word	0x0800420a

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bfb8      	it	lt
 8003c68:	4613      	movlt	r3, r2
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c70:	4607      	mov	r7, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc26      	bgt.n	8003cea <_printf_common+0x96>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42b      	bmi.n	8003d04 <_printf_common+0xb0>
 8003cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d01e      	beq.n	8003cf8 <_printf_common+0xa4>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	68e5      	ldr	r5, [r4, #12]
 8003cbe:	6832      	ldr	r2, [r6, #0]
 8003cc0:	f003 0306 	and.w	r3, r3, #6
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	bf08      	it	eq
 8003cc8:	1aad      	subeq	r5, r5, r2
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	bf0c      	ite	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	2500      	movne	r5, #0
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bfc4      	itt	gt
 8003cda:	1a9b      	subgt	r3, r3, r2
 8003cdc:	18ed      	addgt	r5, r5, r3
 8003cde:	2600      	movs	r6, #0
 8003ce0:	341a      	adds	r4, #26
 8003ce2:	42b5      	cmp	r5, r6
 8003ce4:	d11a      	bne.n	8003d1c <_printf_common+0xc8>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e008      	b.n	8003cfc <_printf_common+0xa8>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4652      	mov	r2, sl
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	47c0      	blx	r8
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_printf_common+0xac>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	3501      	adds	r5, #1
 8003d02:	e7c6      	b.n	8003c92 <_printf_common+0x3e>
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	2030      	movs	r0, #48	; 0x30
 8003d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d0e:	4422      	add	r2, r4
 8003d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d18:	3302      	adds	r3, #2
 8003d1a:	e7c7      	b.n	8003cac <_printf_common+0x58>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4649      	mov	r1, r9
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d0e6      	beq.n	8003cf8 <_printf_common+0xa4>
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7d9      	b.n	8003ce2 <_printf_common+0x8e>
	...

08003d30 <_printf_i>:
 8003d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	7e0f      	ldrb	r7, [r1, #24]
 8003d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d38:	2f78      	cmp	r7, #120	; 0x78
 8003d3a:	4691      	mov	r9, r2
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	469a      	mov	sl, r3
 8003d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d46:	d807      	bhi.n	8003d58 <_printf_i+0x28>
 8003d48:	2f62      	cmp	r7, #98	; 0x62
 8003d4a:	d80a      	bhi.n	8003d62 <_printf_i+0x32>
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	f000 80d8 	beq.w	8003f02 <_printf_i+0x1d2>
 8003d52:	2f58      	cmp	r7, #88	; 0x58
 8003d54:	f000 80a3 	beq.w	8003e9e <_printf_i+0x16e>
 8003d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d60:	e03a      	b.n	8003dd8 <_printf_i+0xa8>
 8003d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d66:	2b15      	cmp	r3, #21
 8003d68:	d8f6      	bhi.n	8003d58 <_printf_i+0x28>
 8003d6a:	a101      	add	r1, pc, #4	; (adr r1, 8003d70 <_printf_i+0x40>)
 8003d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003ddd 	.word	0x08003ddd
 8003d78:	08003d59 	.word	0x08003d59
 8003d7c:	08003d59 	.word	0x08003d59
 8003d80:	08003d59 	.word	0x08003d59
 8003d84:	08003d59 	.word	0x08003d59
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003d59 	.word	0x08003d59
 8003d90:	08003d59 	.word	0x08003d59
 8003d94:	08003d59 	.word	0x08003d59
 8003d98:	08003d59 	.word	0x08003d59
 8003d9c:	08003ee9 	.word	0x08003ee9
 8003da0:	08003e0d 	.word	0x08003e0d
 8003da4:	08003ecb 	.word	0x08003ecb
 8003da8:	08003d59 	.word	0x08003d59
 8003dac:	08003d59 	.word	0x08003d59
 8003db0:	08003f0b 	.word	0x08003f0b
 8003db4:	08003d59 	.word	0x08003d59
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003d59 	.word	0x08003d59
 8003dc0:	08003d59 	.word	0x08003d59
 8003dc4:	08003ed3 	.word	0x08003ed3
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	602a      	str	r2, [r5, #0]
 8003dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0a3      	b.n	8003f24 <_printf_i+0x1f4>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	6829      	ldr	r1, [r5, #0]
 8003de0:	0606      	lsls	r6, r0, #24
 8003de2:	f101 0304 	add.w	r3, r1, #4
 8003de6:	d50a      	bpl.n	8003dfe <_printf_i+0xce>
 8003de8:	680e      	ldr	r6, [r1, #0]
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	2e00      	cmp	r6, #0
 8003dee:	da03      	bge.n	8003df8 <_printf_i+0xc8>
 8003df0:	232d      	movs	r3, #45	; 0x2d
 8003df2:	4276      	negs	r6, r6
 8003df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df8:	485e      	ldr	r0, [pc, #376]	; (8003f74 <_printf_i+0x244>)
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	e019      	b.n	8003e32 <_printf_i+0x102>
 8003dfe:	680e      	ldr	r6, [r1, #0]
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e06:	bf18      	it	ne
 8003e08:	b236      	sxthne	r6, r6
 8003e0a:	e7ef      	b.n	8003dec <_printf_i+0xbc>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	1d19      	adds	r1, r3, #4
 8003e12:	6029      	str	r1, [r5, #0]
 8003e14:	0601      	lsls	r1, r0, #24
 8003e16:	d501      	bpl.n	8003e1c <_printf_i+0xec>
 8003e18:	681e      	ldr	r6, [r3, #0]
 8003e1a:	e002      	b.n	8003e22 <_printf_i+0xf2>
 8003e1c:	0646      	lsls	r6, r0, #25
 8003e1e:	d5fb      	bpl.n	8003e18 <_printf_i+0xe8>
 8003e20:	881e      	ldrh	r6, [r3, #0]
 8003e22:	4854      	ldr	r0, [pc, #336]	; (8003f74 <_printf_i+0x244>)
 8003e24:	2f6f      	cmp	r7, #111	; 0x6f
 8003e26:	bf0c      	ite	eq
 8003e28:	2308      	moveq	r3, #8
 8003e2a:	230a      	movne	r3, #10
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e32:	6865      	ldr	r5, [r4, #4]
 8003e34:	60a5      	str	r5, [r4, #8]
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	bfa2      	ittt	ge
 8003e3a:	6821      	ldrge	r1, [r4, #0]
 8003e3c:	f021 0104 	bicge.w	r1, r1, #4
 8003e40:	6021      	strge	r1, [r4, #0]
 8003e42:	b90e      	cbnz	r6, 8003e48 <_printf_i+0x118>
 8003e44:	2d00      	cmp	r5, #0
 8003e46:	d04d      	beq.n	8003ee4 <_printf_i+0x1b4>
 8003e48:	4615      	mov	r5, r2
 8003e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e52:	5dc7      	ldrb	r7, [r0, r7]
 8003e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e58:	4637      	mov	r7, r6
 8003e5a:	42bb      	cmp	r3, r7
 8003e5c:	460e      	mov	r6, r1
 8003e5e:	d9f4      	bls.n	8003e4a <_printf_i+0x11a>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d10b      	bne.n	8003e7c <_printf_i+0x14c>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	07de      	lsls	r6, r3, #31
 8003e68:	d508      	bpl.n	8003e7c <_printf_i+0x14c>
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	6861      	ldr	r1, [r4, #4]
 8003e6e:	4299      	cmp	r1, r3
 8003e70:	bfde      	ittt	le
 8003e72:	2330      	movle	r3, #48	; 0x30
 8003e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e7c:	1b52      	subs	r2, r2, r5
 8003e7e:	6122      	str	r2, [r4, #16]
 8003e80:	f8cd a000 	str.w	sl, [sp]
 8003e84:	464b      	mov	r3, r9
 8003e86:	aa03      	add	r2, sp, #12
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f7ff fee2 	bl	8003c54 <_printf_common>
 8003e90:	3001      	adds	r0, #1
 8003e92:	d14c      	bne.n	8003f2e <_printf_i+0x1fe>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	b004      	add	sp, #16
 8003e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9e:	4835      	ldr	r0, [pc, #212]	; (8003f74 <_printf_i+0x244>)
 8003ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ea4:	6829      	ldr	r1, [r5, #0]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eac:	6029      	str	r1, [r5, #0]
 8003eae:	061d      	lsls	r5, r3, #24
 8003eb0:	d514      	bpl.n	8003edc <_printf_i+0x1ac>
 8003eb2:	07df      	lsls	r7, r3, #31
 8003eb4:	bf44      	itt	mi
 8003eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8003eba:	6023      	strmi	r3, [r4, #0]
 8003ebc:	b91e      	cbnz	r6, 8003ec6 <_printf_i+0x196>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f023 0320 	bic.w	r3, r3, #32
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	e7b0      	b.n	8003e2c <_printf_i+0xfc>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f043 0320 	orr.w	r3, r3, #32
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	2378      	movs	r3, #120	; 0x78
 8003ed4:	4828      	ldr	r0, [pc, #160]	; (8003f78 <_printf_i+0x248>)
 8003ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eda:	e7e3      	b.n	8003ea4 <_printf_i+0x174>
 8003edc:	0659      	lsls	r1, r3, #25
 8003ede:	bf48      	it	mi
 8003ee0:	b2b6      	uxthmi	r6, r6
 8003ee2:	e7e6      	b.n	8003eb2 <_printf_i+0x182>
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	e7bb      	b.n	8003e60 <_printf_i+0x130>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	6826      	ldr	r6, [r4, #0]
 8003eec:	6961      	ldr	r1, [r4, #20]
 8003eee:	1d18      	adds	r0, r3, #4
 8003ef0:	6028      	str	r0, [r5, #0]
 8003ef2:	0635      	lsls	r5, r6, #24
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0x1cc>
 8003ef8:	6019      	str	r1, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0x1d2>
 8003efc:	0670      	lsls	r0, r6, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0x1c8>
 8003f00:	8019      	strh	r1, [r3, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	6123      	str	r3, [r4, #16]
 8003f06:	4615      	mov	r5, r2
 8003f08:	e7ba      	b.n	8003e80 <_printf_i+0x150>
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	1d1a      	adds	r2, r3, #4
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	6862      	ldr	r2, [r4, #4]
 8003f14:	2100      	movs	r1, #0
 8003f16:	4628      	mov	r0, r5
 8003f18:	f7fc f972 	bl	8000200 <memchr>
 8003f1c:	b108      	cbz	r0, 8003f22 <_printf_i+0x1f2>
 8003f1e:	1b40      	subs	r0, r0, r5
 8003f20:	6060      	str	r0, [r4, #4]
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	6123      	str	r3, [r4, #16]
 8003f26:	2300      	movs	r3, #0
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2c:	e7a8      	b.n	8003e80 <_printf_i+0x150>
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	462a      	mov	r2, r5
 8003f32:	4649      	mov	r1, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	47d0      	blx	sl
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0ab      	beq.n	8003e94 <_printf_i+0x164>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	079b      	lsls	r3, r3, #30
 8003f40:	d413      	bmi.n	8003f6a <_printf_i+0x23a>
 8003f42:	68e0      	ldr	r0, [r4, #12]
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	4298      	cmp	r0, r3
 8003f48:	bfb8      	it	lt
 8003f4a:	4618      	movlt	r0, r3
 8003f4c:	e7a4      	b.n	8003e98 <_printf_i+0x168>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4632      	mov	r2, r6
 8003f52:	4649      	mov	r1, r9
 8003f54:	4640      	mov	r0, r8
 8003f56:	47d0      	blx	sl
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d09b      	beq.n	8003e94 <_printf_i+0x164>
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	68e3      	ldr	r3, [r4, #12]
 8003f60:	9903      	ldr	r1, [sp, #12]
 8003f62:	1a5b      	subs	r3, r3, r1
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	dcf2      	bgt.n	8003f4e <_printf_i+0x21e>
 8003f68:	e7eb      	b.n	8003f42 <_printf_i+0x212>
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	f104 0619 	add.w	r6, r4, #25
 8003f70:	e7f5      	b.n	8003f5e <_printf_i+0x22e>
 8003f72:	bf00      	nop
 8003f74:	08004215 	.word	0x08004215
 8003f78:	08004226 	.word	0x08004226

08003f7c <memcpy>:
 8003f7c:	440a      	add	r2, r1
 8003f7e:	4291      	cmp	r1, r2
 8003f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f84:	d100      	bne.n	8003f88 <memcpy+0xc>
 8003f86:	4770      	bx	lr
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f92:	4291      	cmp	r1, r2
 8003f94:	d1f9      	bne.n	8003f8a <memcpy+0xe>
 8003f96:	bd10      	pop	{r4, pc}

08003f98 <memmove>:
 8003f98:	4288      	cmp	r0, r1
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	eb01 0402 	add.w	r4, r1, r2
 8003fa0:	d902      	bls.n	8003fa8 <memmove+0x10>
 8003fa2:	4284      	cmp	r4, r0
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	d807      	bhi.n	8003fb8 <memmove+0x20>
 8003fa8:	1e43      	subs	r3, r0, #1
 8003faa:	42a1      	cmp	r1, r4
 8003fac:	d008      	beq.n	8003fc0 <memmove+0x28>
 8003fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fb6:	e7f8      	b.n	8003faa <memmove+0x12>
 8003fb8:	4402      	add	r2, r0
 8003fba:	4601      	mov	r1, r0
 8003fbc:	428a      	cmp	r2, r1
 8003fbe:	d100      	bne.n	8003fc2 <memmove+0x2a>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fca:	e7f7      	b.n	8003fbc <memmove+0x24>

08003fcc <_realloc_r>:
 8003fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	4614      	mov	r4, r2
 8003fd4:	460e      	mov	r6, r1
 8003fd6:	b921      	cbnz	r1, 8003fe2 <_realloc_r+0x16>
 8003fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fdc:	4611      	mov	r1, r2
 8003fde:	f7ff bbd9 	b.w	8003794 <_malloc_r>
 8003fe2:	b92a      	cbnz	r2, 8003ff0 <_realloc_r+0x24>
 8003fe4:	f7ff fc8e 	bl	8003904 <_free_r>
 8003fe8:	4625      	mov	r5, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	f000 f81b 	bl	800402a <_malloc_usable_size_r>
 8003ff4:	4284      	cmp	r4, r0
 8003ff6:	4607      	mov	r7, r0
 8003ff8:	d802      	bhi.n	8004000 <_realloc_r+0x34>
 8003ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ffe:	d812      	bhi.n	8004026 <_realloc_r+0x5a>
 8004000:	4621      	mov	r1, r4
 8004002:	4640      	mov	r0, r8
 8004004:	f7ff fbc6 	bl	8003794 <_malloc_r>
 8004008:	4605      	mov	r5, r0
 800400a:	2800      	cmp	r0, #0
 800400c:	d0ed      	beq.n	8003fea <_realloc_r+0x1e>
 800400e:	42bc      	cmp	r4, r7
 8004010:	4622      	mov	r2, r4
 8004012:	4631      	mov	r1, r6
 8004014:	bf28      	it	cs
 8004016:	463a      	movcs	r2, r7
 8004018:	f7ff ffb0 	bl	8003f7c <memcpy>
 800401c:	4631      	mov	r1, r6
 800401e:	4640      	mov	r0, r8
 8004020:	f7ff fc70 	bl	8003904 <_free_r>
 8004024:	e7e1      	b.n	8003fea <_realloc_r+0x1e>
 8004026:	4635      	mov	r5, r6
 8004028:	e7df      	b.n	8003fea <_realloc_r+0x1e>

0800402a <_malloc_usable_size_r>:
 800402a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402e:	1f18      	subs	r0, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfbc      	itt	lt
 8004034:	580b      	ldrlt	r3, [r1, r0]
 8004036:	18c0      	addlt	r0, r0, r3
 8004038:	4770      	bx	lr
	...

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
