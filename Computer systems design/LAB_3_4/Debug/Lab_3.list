
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  000217e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a48  08006a48  000217e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000017e4  20000000  08006a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  200017e4  08008234  000217e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006164  08008234  00026164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000217e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f66e  00000000  00000000  00021814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002152  00000000  00000000  00030e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00032fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00033f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023947  00000000  00000000  00034de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010634  00000000  00000000  00058727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d944d  00000000  00000000  00068d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001421a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004244  00000000  00000000  001421f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200017e4 	.word	0x200017e4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006004 	.word	0x08006004

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200017e8 	.word	0x200017e8
 80001e8:	08006004 	.word	0x08006004

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <buf_init>:
    bool empty;
};

typedef struct RingBuffer RingBuffer;

static void buf_init(RingBuffer *buf) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    buf->head = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
    buf->tail = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000518:	2200      	movs	r2, #0
 800051a:	705a      	strb	r2, [r3, #1]
    buf->empty = true;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000522:	2201      	movs	r2, #1
 8000524:	709a      	strb	r2, [r3, #2]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <buf_push>:

static void buf_push(RingBuffer *buf, char * el) {
 8000532:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
	uint64_t size = strlen(el);
 800053e:	68b8      	ldr	r0, [r7, #8]
 8000540:	f7ff fe54 	bl	80001ec <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	2200      	movs	r2, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000550:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (buf->head + size + 1 > BUF_SIZE) {
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2200      	movs	r2, #0
 8000560:	469a      	mov	sl, r3
 8000562:	4693      	mov	fp, r2
 8000564:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000568:	eb1a 0802 	adds.w	r8, sl, r2
 800056c:	eb4b 0903 	adc.w	r9, fp, r3
 8000570:	f118 0401 	adds.w	r4, r8, #1
 8000574:	f149 0500 	adc.w	r5, r9, #0
 8000578:	f242 0301 	movw	r3, #8193	; 0x2001
 800057c:	429c      	cmp	r4, r3
 800057e:	f175 0300 	sbcs.w	r3, r5, #0
 8000582:	d304      	bcc.n	800058e <buf_push+0x5c>
		buf->head = 0;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
	}

	strcpy(&buf->data[buf->head], el);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fd28 	bl	8005ff4 <strcpy>
//    buf->data[buf->head] = el;
    buf->head += size + 1;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	7c3b      	ldrb	r3, [r7, #16]
 80005ae:	4413      	add	r3, r2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005bc:	701a      	strb	r2, [r3, #0]

    if (buf->head == BUF_SIZE) {
        buf->head = 0;
    }

    buf->empty = false;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005c4:	2200      	movs	r2, #0
 80005c6:	709a      	strb	r2, [r3, #2]
}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080005d2 <buf_pop>:

static bool buf_pop(RingBuffer *buf, /* out */ char * el) {
 80005d2:	b5b0      	push	{r4, r5, r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
    if (buf->empty) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005e2:	789b      	ldrb	r3, [r3, #2]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <buf_pop+0x1a>
        return false;
 80005e8:	2300      	movs	r3, #0
 80005ea:	e042      	b.n	8000672 <buf_pop+0xa0>
    }

    uint64_t size = strlen(&buf->data[buf->tail]);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf6 	bl	80001ec <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	2200      	movs	r2, #0
 8000604:	461c      	mov	r4, r3
 8000606:	4615      	mov	r5, r2
 8000608:	e9c7 4502 	strd	r4, r5, [r7, #8]

    strcpy(el, &buf->data[buf->tail]);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4619      	mov	r1, r3
 800061c:	6838      	ldr	r0, [r7, #0]
 800061e:	f005 fce9 	bl	8005ff4 <strcpy>
    buf->tail += size + 1;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000628:	785a      	ldrb	r2, [r3, #1]
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	4413      	add	r3, r2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800063a:	705a      	strb	r2, [r3, #1]

    if (buf->tail == BUF_SIZE || buf->tail == '\0') {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d104      	bne.n	8000652 <buf_pop+0x80>
        buf->tail = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800064e:	2200      	movs	r2, #0
 8000650:	705a      	strb	r2, [r3, #1]
    }

    if (buf->tail == buf->head) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d104      	bne.n	8000670 <buf_pop+0x9e>
        buf->empty = true;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800066c:	2201      	movs	r2, #1
 800066e:	709a      	strb	r2, [r3, #2]
    }

    return true;
 8000670:	2301      	movs	r3, #1
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bdb0      	pop	{r4, r5, r7, pc}

0800067a <disable_interrupt>:

void enable_interrupt(struct Status *status) {
    status->interrupt_enable = true;
}

void disable_interrupt(struct Status *status) {
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
    status->interrupt_enable = false;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <transmit_uart>:

void transmit_uart(const struct Status *status, char *buf, size_t size) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
    if (status->interrupt_enable) {
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d013      	beq.n	80006d0 <transmit_uart+0x3c>
        if (transmit_busy) {
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <transmit_uart+0x54>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d004      	beq.n	80006ba <transmit_uart+0x26>
        	buf_push(&ringBufferTx, buf);
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <transmit_uart+0x58>)
 80006b4:	f7ff ff3d 	bl	8000532 <buf_push>
        }
        else {
        	HAL_UART_Transmit_IT(&huart6, buf, size);
        	transmit_busy = true;
        }
        return;
 80006b8:	e012      	b.n	80006e0 <transmit_uart+0x4c>
        	HAL_UART_Transmit_IT(&huart6, buf, size);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <transmit_uart+0x5c>)
 80006c4:	f004 fcd2 	bl	800506c <HAL_UART_Transmit_IT>
        	transmit_busy = true;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <transmit_uart+0x54>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
        return;
 80006ce:	e007      	b.n	80006e0 <transmit_uart+0x4c>
    }
    HAL_UART_Transmit(&huart6, buf, size, 500);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006d8:	68b9      	ldr	r1, [r7, #8]
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <transmit_uart+0x5c>)
 80006dc:	f004 fc2d 	bl	8004f3a <HAL_UART_Transmit>
}
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000592c 	.word	0x2000592c
 80006ec:	2000391c 	.word	0x2000391c
 80006f0:	200018d8 	.word	0x200018d8

080006f4 <transmit_uart_nl>:

void transmit_uart_nl(const struct Status *status, char *buf, size_t size) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    transmit_uart(status, buf, size);
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff ffc5 	bl	8000694 <transmit_uart>
    transmit_uart(status, "\r\n", 2);
 800070a:	2202      	movs	r2, #2
 800070c:	4903      	ldr	r1, [pc, #12]	; (800071c <transmit_uart_nl+0x28>)
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ffc0 	bl	8000694 <transmit_uart>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	0800601c 	.word	0x0800601c

08000720 <HAL_UART_RxCpltCallback>:
        case HAL_TIMEOUT:
            break;
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	buf_push(&ringBufferRx, el);
 8000728:	4906      	ldr	r1, [pc, #24]	; (8000744 <HAL_UART_RxCpltCallback+0x24>)
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_UART_RxCpltCallback+0x28>)
 800072c:	f7ff ff01 	bl	8000532 <buf_push>
	transmit_uart(&status, el, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	4904      	ldr	r1, [pc, #16]	; (8000744 <HAL_UART_RxCpltCallback+0x24>)
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_UART_RxCpltCallback+0x2c>)
 8000736:	f7ff ffad 	bl	8000694 <transmit_uart>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20005920 	.word	0x20005920
 8000748:	20001918 	.word	0x20001918
 800074c:	20005924 	.word	0x20005924

08000750 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000750:	b580      	push	{r7, lr}
 8000752:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000756:	af00      	add	r7, sp, #0
 8000758:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800075c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000760:	6018      	str	r0, [r3, #0]
	char buf[1024];
	if (buf_pop(&ringBufferTx, buf)) {
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4619      	mov	r1, r3
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_UART_TxCpltCallback+0x50>)
 800076a:	f7ff ff32 	bl	80005d2 <buf_pop>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00d      	beq.n	8000790 <HAL_UART_TxCpltCallback+0x40>
		HAL_UART_Transmit_IT(&huart6, buf, strlen(buf));
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd37 	bl	80001ec <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <HAL_UART_TxCpltCallback+0x54>)
 800078a:	f004 fc6f 	bl	800506c <HAL_UART_Transmit_IT>
	}
	else {
		transmit_busy = false;
	}
}
 800078e:	e002      	b.n	8000796 <HAL_UART_TxCpltCallback+0x46>
		transmit_busy = false;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_UART_TxCpltCallback+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000391c 	.word	0x2000391c
 80007a4:	200018d8 	.word	0x200018d8
 80007a8:	2000592c 	.word	0x2000592c

080007ac <play_melody>:
uint32_t * melody = start_melody;
uint32_t * melody_delays = start_delays;
uint32_t melody_size = sizeof(start_melody) / sizeof (uint32_t);


void play_melody(uint32_t * m, uint32_t * d, uint32_t size) {
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	i = 0;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <play_melody+0x38>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
	melody = m;
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <play_melody+0x3c>)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	6013      	str	r3, [r2, #0]
	melody_delays = d;
 80007c4:	4a09      	ldr	r2, [pc, #36]	; (80007ec <play_melody+0x40>)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	6013      	str	r3, [r2, #0]
	melody_size = size;
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <play_melody+0x44>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6013      	str	r3, [r2, #0]
	melody_playing = true;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <play_melody+0x48>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20006134 	.word	0x20006134
 80007e8:	200017a0 	.word	0x200017a0
 80007ec:	200017a4 	.word	0x200017a4
 80007f0:	200017a8 	.word	0x200017a8
 80007f4:	2000179c 	.word	0x2000179c

080007f8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a37      	ldr	r2, [pc, #220]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d167      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0xe2>
        if (!melody_playing) {
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d15f      	bne.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0xe0>
            return;
        }
		if (duration > 0) duration--;
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <HAL_TIM_PeriodElapsedCallback+0x32>
 8000820:	4b32      	ldr	r3, [pc, #200]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3b01      	subs	r3, #1
 8000826:	4a31      	ldr	r2, [pc, #196]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000828:	6013      	str	r3, [r2, #0]
		if (duration == 0) {
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d153      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0xe2>
			if (melody[i] == 0) {
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10d      	bne.n	8000860 <HAL_TIM_PeriodElapsedCallback+0x68>
				// Выключаем звук
				htim1.Instance->CCR1 = 0; // 0%
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
				duration = melody_delays[i];
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a24      	ldr	r2, [pc, #144]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	e022      	b.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0xae>
			} else {
				// Проигрываем ноты
				duration = melody_delays[i];
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000870:	6013      	str	r3, [r2, #0]
				htim1.Instance->ARR = 90000000 / (melody[i] * htim1.Instance->PSC) - 1;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4413      	add	r3, r2
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800088c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3a01      	subs	r2, #1
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
     			htim1.Instance->CCR1 = htim1.Instance->ARR >> 1; // 50% громкость (100%) - скважность
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	0852      	lsrs	r2, r2, #1
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
			}
			i++;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80008ae:	6013      	str	r3, [r2, #0]
			if (i == melody_size){
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d10e      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0xe2>
                i = 0;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
                duration = 1;
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
                melody_playing = false;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]

                // Выключаем звук
                htim1.Instance->CCR1 = 0; // 0%
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2200      	movs	r2, #0
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	e000      	b.n	80008da <HAL_TIM_PeriodElapsedCallback+0xe2>
            return;
 80008d8:	bf00      	nop
            }
		}
	}
}
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40001000 	.word	0x40001000
 80008e8:	2000179c 	.word	0x2000179c
 80008ec:	20001798 	.word	0x20001798
 80008f0:	200017a0 	.word	0x200017a0
 80008f4:	20006134 	.word	0x20006134
 80008f8:	20001858 	.word	0x20001858
 80008fc:	200017a4 	.word	0x200017a4
 8000900:	055d4a80 	.word	0x055d4a80
 8000904:	200017a8 	.word	0x200017a8

08000908 <is_btn_press>:

char music[] = {'1', '2', '3', '4', '5', 'x', '!', '!', '!', '?', '!', '\r'};
char settings[] = {'1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '0', 'e'};
char save_exit[] = {'\r', 'q', 's', '!', '!', '!', '!', '!', '!', '?', '!', 'e'};

bool is_btn_press() {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	 return HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15) == 0;
 800090c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <is_btn_press+0x20>)
 8000912:	f001 fe51 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 }
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020800 	.word	0x40020800

0800092c <get_pressed_btn_index>:

int stroka[4] = {0, 0, 0, 0};
int stolbec[3] = {0, 0, 0};

int get_pressed_btn_index(){
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af04      	add	r7, sp, #16
	const uint32_t t = HAL_GetTick();
 8000932:	f001 fb31 	bl	8001f98 <HAL_GetTick>
 8000936:	60b8      	str	r0, [r7, #8]
	if (t - last_pressing_time < KB_KEY_DEBOUNCE_TIME) return -1;
 8000938:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <get_pressed_btn_index+0x22c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2bc7      	cmp	r3, #199	; 0xc7
 8000942:	d802      	bhi.n	800094a <get_pressed_btn_index+0x1e>
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	e101      	b.n	8000b4e <get_pressed_btn_index+0x222>
	int index = -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t reg_buffer = ~0;
 8000950:	23ff      	movs	r3, #255	; 0xff
 8000952:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
	HAL_I2C_Mem_Write(&hi2c1, KB_I2C_WRITE_ADDRESS, KB_OUTPUT_REG, 1, &tmp, 1, KB_KEY_DEBOUNCE_TIME);
 800095c:	23c8      	movs	r3, #200	; 0xc8
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	2301      	movs	r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	2201      	movs	r2, #1
 800096c:	21e2      	movs	r1, #226	; 0xe2
 800096e:	487b      	ldr	r0, [pc, #492]	; (8000b5c <get_pressed_btn_index+0x230>)
 8000970:	f001 ff98 	bl	80028a4 <HAL_I2C_Mem_Write>
	for (int row = 0; row < 4; row++) {
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	e098      	b.n	8000aac <get_pressed_btn_index+0x180>
		uint8_t buf = ~((uint8_t) (1 << row));
 800097a:	2201      	movs	r2, #1
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, KB_I2C_WRITE_ADDRESS, KB_CONFIG_REG, 1, &buf, 1, KB_KEY_DEBOUNCE_TIME);
 800098a:	23c8      	movs	r3, #200	; 0xc8
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2301      	movs	r3, #1
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	1d7b      	adds	r3, r7, #5
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	21e2      	movs	r1, #226	; 0xe2
 800099c:	486f      	ldr	r0, [pc, #444]	; (8000b5c <get_pressed_btn_index+0x230>)
 800099e:	f001 ff81 	bl	80028a4 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f001 fb04 	bl	8001fb0 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c1, KB_I2C_READ_ADDRESS, KB_INPUT_REG, 1, &reg_buffer, 1, KB_KEY_DEBOUNCE_TIME);
 80009a8:	23c8      	movs	r3, #200	; 0xc8
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	2301      	movs	r3, #1
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	2200      	movs	r2, #0
 80009b8:	21e3      	movs	r1, #227	; 0xe3
 80009ba:	4868      	ldr	r0, [pc, #416]	; (8000b5c <get_pressed_btn_index+0x230>)
 80009bc:	f002 f86c 	bl	8002a98 <HAL_I2C_Mem_Read>
//		if (i == 0)
		switch(reg_buffer >> 4){
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d86d      	bhi.n	8000aa6 <get_pressed_btn_index+0x17a>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <get_pressed_btn_index+0xa4>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	08000aa1 	.word	0x08000aa1
 80009d4:	08000aa1 	.word	0x08000aa1
 80009d8:	08000aa1 	.word	0x08000aa1
 80009dc:	08000a65 	.word	0x08000a65
 80009e0:	08000aa1 	.word	0x08000aa1
 80009e4:	08000a29 	.word	0x08000a29
 80009e8:	080009ed 	.word	0x080009ed
			case 6: index = (i == 0) ? row * 3 + 1 : -1; i++; stroka[row] += 1; stolbec[0] += 1; break;
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d105      	bne.n	80009fe <get_pressed_btn_index+0xd2>
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	3301      	adds	r3, #1
 80009fc:	e001      	b.n	8000a02 <get_pressed_btn_index+0xd6>
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	3301      	adds	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
 8000a0a:	4a55      	ldr	r2, [pc, #340]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	4952      	ldr	r1, [pc, #328]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a1c:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a50      	ldr	r2, [pc, #320]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e03e      	b.n	8000aa6 <get_pressed_btn_index+0x17a>
			case 5: index = (i == 0) ? row * 3 + 2 : -1; i++; stroka[row] += 1; stolbec[1] += 1; break;
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d105      	bne.n	8000a3a <get_pressed_btn_index+0x10e>
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	3302      	adds	r3, #2
 8000a38:	e001      	b.n	8000a3e <get_pressed_btn_index+0x112>
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	3301      	adds	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
 8000a46:	4a46      	ldr	r2, [pc, #280]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	4943      	ldr	r1, [pc, #268]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a58:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a41      	ldr	r2, [pc, #260]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000a60:	6053      	str	r3, [r2, #4]
 8000a62:	e020      	b.n	8000aa6 <get_pressed_btn_index+0x17a>
			case 3: index = (i == 0) ? row * 3 + 3 : -1; i++; stroka[row] += 1; stolbec[2] += 1; break;
 8000a64:	6a3b      	ldr	r3, [r7, #32]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <get_pressed_btn_index+0x14a>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	e001      	b.n	8000a7a <get_pressed_btn_index+0x14e>
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	4a37      	ldr	r2, [pc, #220]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	4934      	ldr	r1, [pc, #208]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000a9c:	6093      	str	r3, [r2, #8]
 8000a9e:	e002      	b.n	8000aa6 <get_pressed_btn_index+0x17a>
			case 0:
			case 1:
			case 2:
			case 4:
				index = -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
	for (int row = 0; row < 4; row++) {
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	f77f af63 	ble.w	800097a <get_pressed_btn_index+0x4e>
		}
	}
	if (index != -1) last_pressing_time = t;
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d002      	beq.n	8000ac2 <get_pressed_btn_index+0x196>
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <get_pressed_btn_index+0x22c>)
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	6013      	str	r3, [r2, #0]
	if (index == last_pressed_btn_index){
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <get_pressed_btn_index+0x23c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d102      	bne.n	8000ad2 <get_pressed_btn_index+0x1a6>
		return -1;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	e03d      	b.n	8000b4e <get_pressed_btn_index+0x222>
	}
//	if (i != 1) return -1;
	last_pressed_btn_index = index;
 8000ad2:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <get_pressed_btn_index+0x23c>)
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	6013      	str	r3, [r2, #0]

	int sum_stroka = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
	int sum_stolbec = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

	for (int j=0; j <= 3; j++){
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	e00e      	b.n	8000b04 <get_pressed_btn_index+0x1d8>
		sum_stroka += stroka[j];
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4413      	add	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
		stroka[j] = 0;
 8000af4:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <get_pressed_btn_index+0x234>)
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	2100      	movs	r1, #0
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int j=0; j <= 3; j++){
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	3301      	adds	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	dded      	ble.n	8000ae6 <get_pressed_btn_index+0x1ba>
	}

	for (int j=0; j <= 2; j++){
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e00e      	b.n	8000b2e <get_pressed_btn_index+0x202>
		sum_stolbec += stolbec[j];
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	617b      	str	r3, [r7, #20]
		stolbec[j] = 0;
 8000b1e:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <get_pressed_btn_index+0x238>)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2100      	movs	r1, #0
 8000b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int j=0; j <= 2; j++){
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	dded      	ble.n	8000b10 <get_pressed_btn_index+0x1e4>
	}

	if (sum_stroka != 1){
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d002      	beq.n	8000b40 <get_pressed_btn_index+0x214>
		return -1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e006      	b.n	8000b4e <get_pressed_btn_index+0x222>
	}
	if (sum_stolbec != 1){
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d002      	beq.n	8000b4c <get_pressed_btn_index+0x220>
		return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e000      	b.n	8000b4e <get_pressed_btn_index+0x222>
	}

	return index;
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000613c 	.word	0x2000613c
 8000b5c:	20001804 	.word	0x20001804
 8000b60:	20006144 	.word	0x20006144
 8000b64:	20006154 	.word	0x20006154
 8000b68:	200017b0 	.word	0x200017b0

08000b6c <key2char>:

char key2char(const int key){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    return is_music_mode ? music[key - 1] : (is_settings_2 ? save_exit[key - 1] : settings[key - 1]);
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <key2char+0x40>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <key2char+0x1a>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <key2char+0x44>)
 8000b82:	5cd3      	ldrb	r3, [r2, r3]
 8000b84:	e00c      	b.n	8000ba0 <key2char+0x34>
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <key2char+0x48>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <key2char+0x2c>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <key2char+0x4c>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	e003      	b.n	8000ba0 <key2char+0x34>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <key2char+0x50>)
 8000b9e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	200017ac 	.word	0x200017ac
 8000bb0:	200017b4 	.word	0x200017b4
 8000bb4:	20006138 	.word	0x20006138
 8000bb8:	200017cc 	.word	0x200017cc
 8000bbc:	200017c0 	.word	0x200017c0

08000bc0 <set_green_led>:

static void set_green_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <set_green_led+0x20>)
 8000bd4:	f001 fd08 	bl	80025e8 <HAL_GPIO_WritePin>
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <set_red_led>:

static void set_yellow_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }

static void set_red_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <set_red_led+0x20>)
 8000bf8:	f001 fcf6 	bl	80025e8 <HAL_GPIO_WritePin>
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020c00 	.word	0x40020c00

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	f5ad 5d89 	sub.w	sp, sp, #4384	; 0x1120
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f001 f95b 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 fd67 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 ff17 	bl	8001a4c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c1e:	f000 fe13 	bl	8001848 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000c22:	f000 feb3 	bl	800198c <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000c26:	f000 fee7 	bl	80019f8 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000c2a:	f000 fdcd 	bl	80017c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t a = 0x70;
//  HAL_I2C_Mem_Write(&hi2c1, KB_I2C_WRITE_ADDRESS, KB_CONFIG_REG, 1, &a, 1, 100);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	48cc      	ldr	r0, [pc, #816]	; (8000f64 <main+0x35c>)
 8000c32:	f003 fa4b 	bl	80040cc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c36:	48cc      	ldr	r0, [pc, #816]	; (8000f68 <main+0x360>)
 8000c38:	f003 f9ef 	bl	800401a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool prog_start = true;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000c42:	f102 020f 	add.w	r2, r2, #15
 8000c46:	7013      	strb	r3, [r2, #0]

  char empty_msg[] = {"\r"};
 8000c48:	230d      	movs	r3, #13
 8000c4a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c4e:	f102 0210 	add.w	r2, r2, #16
 8000c52:	8013      	strh	r3, [r2, #0]
  char hello_msg[] = {""
 8000c54:	4ac5      	ldr	r2, [pc, #788]	; (8000f6c <main+0x364>)
 8000c56:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000c5a:	f103 0314 	add.w	r3, r3, #20
 8000c5e:	4611      	mov	r1, r2
 8000c60:	225b      	movs	r2, #91	; 0x5b
 8000c62:	4618      	mov	r0, r3
 8000c64:	f005 f9b0 	bl	8005fc8 <memcpy>
		  "Привествую в нашем простой музыкально шкатулке!\r\n"
  };
  char layout_music[] = {
 8000c68:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000c6c:	f103 0310 	add.w	r3, r3, #16
 8000c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c74:	4abe      	ldr	r2, [pc, #760]	; (8000f70 <main+0x368>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	4611      	mov	r1, r2
 8000c7a:	238a      	movs	r3, #138	; 0x8a
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f005 f9a3 	bl	8005fc8 <memcpy>
		  "\t----------\r\n"
		  "\t- | - | -\r\n"
		  "\t----------\r\n"
		  "\t? | - | Enter\r\n"
  };
  char layout_settings[] = {
 8000c82:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000c86:	f103 0310 	add.w	r3, r3, #16
 8000c8a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000c8e:	4ab9      	ldr	r2, [pc, #740]	; (8000f74 <main+0x36c>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	4611      	mov	r1, r2
 8000c94:	f240 132b 	movw	r3, #299	; 0x12b
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f005 f995 	bl	8005fc8 <memcpy>
		  "\t----------\r\n"
		  "\t- | - | -\r\n"
		  "\t----------\r\n"
		  "\t? | - | back\r\n"
  };
  char list_melody_msg[] = {
 8000c9e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000ca2:	f103 0310 	add.w	r3, r3, #16
 8000ca6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8000caa:	4ab3      	ldr	r2, [pc, #716]	; (8000f78 <main+0x370>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	4611      	mov	r1, r2
 8000cb0:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f005 f987 	bl	8005fc8 <memcpy>
		  "\t5. - Ваша мелодия.\r\n"
		  "\tx. - Завершить мелодию.\r\n"
		  "\t? - Получить информацию.\r\n"
		  "\tEnter - Настройки вашей мелодии."
  };
  char list_settings_msg[] = {
 8000cba:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000cbe:	f103 0310 	add.w	r3, r3, #16
 8000cc2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8000cc6:	4aad      	ldr	r2, [pc, #692]	; (8000f7c <main+0x374>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	4611      	mov	r1, r2
 8000ccc:	f240 1353 	movw	r3, #339	; 0x153
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f005 f979 	bl	8005fc8 <memcpy>
		  "\t?. - Получить информацию.\r\n"
		  "\ts. - Сохранить мелодию и выйти.\r\n"
		  "\tq - Выйти без сохранения.\r\n"
  };

  char stop_melody_msg[] = {
 8000cd6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000cda:	f103 0310 	add.w	r3, r3, #16
 8000cde:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8000ce2:	4aa7      	ldr	r2, [pc, #668]	; (8000f80 <main+0x378>)
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf4:	c403      	stmia	r4!, {r0, r1}
 8000cf6:	8022      	strh	r2, [r4, #0]
		  " - Мелодия остановлена!"
  };

  // Сообщения выбора мелодии
  char invalid_option_msg[] = {" - Неправильный ввод!"};
 8000cf8:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000cfc:	f103 0310 	add.w	r3, r3, #16
 8000d00:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8000d04:	4a9f      	ldr	r2, [pc, #636]	; (8000f84 <main+0x37c>)
 8000d06:	461c      	mov	r4, r3
 8000d08:	4615      	mov	r5, r2
 8000d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d16:	6020      	str	r0, [r4, #0]
 8000d18:	3404      	adds	r4, #4
 8000d1a:	8021      	strh	r1, [r4, #0]
  char starwars_msg[] = {" - Играет: \"StarWars: Imperial March\""};
 8000d1c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000d20:	f103 0310 	add.w	r3, r3, #16
 8000d24:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8000d28:	4a97      	ldr	r2, [pc, #604]	; (8000f88 <main+0x380>)
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	4615      	mov	r5, r2
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  char megalovania_msg[] = {" - Играет: \"Undertale: Megalovania\""};
 8000d3e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000d42:	f103 0310 	add.w	r3, r3, #16
 8000d46:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8000d4a:	4a90      	ldr	r2, [pc, #576]	; (8000f8c <main+0x384>)
 8000d4c:	461c      	mov	r4, r3
 8000d4e:	4615      	mov	r5, r2
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5c:	c403      	stmia	r4!, {r0, r1}
 8000d5e:	8022      	strh	r2, [r4, #0]
  char zelda_msg[] = {" - Играет: \"Zelda\""};
 8000d60:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000d64:	f103 0310 	add.w	r3, r3, #16
 8000d68:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8000d6c:	4a88      	ldr	r2, [pc, #544]	; (8000f90 <main+0x388>)
 8000d6e:	461c      	mov	r4, r3
 8000d70:	4615      	mov	r5, r2
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7a:	c403      	stmia	r4!, {r0, r1}
 8000d7c:	7022      	strb	r2, [r4, #0]
  char simple_msg[] = {" - Играет: \"Antoshka Melody\""};
 8000d7e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000d82:	f103 0310 	add.w	r3, r3, #16
 8000d86:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8000d8a:	4a82      	ldr	r2, [pc, #520]	; (8000f94 <main+0x38c>)
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	4615      	mov	r5, r2
 8000d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	8022      	strh	r2, [r4, #0]
 8000d9e:	3402      	adds	r4, #2
 8000da0:	0c1b      	lsrs	r3, r3, #16
 8000da2:	7023      	strb	r3, [r4, #0]
  char user_msg[] = {" - �?грает: \"Ваша мелодия\""};
 8000da4:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000da8:	f103 0310 	add.w	r3, r3, #16
 8000dac:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8000db0:	4a79      	ldr	r2, [pc, #484]	; (8000f98 <main+0x390>)
 8000db2:	461c      	mov	r4, r3
 8000db4:	4615      	mov	r5, r2
 8000db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dc2:	c407      	stmia	r4!, {r0, r1, r2}
 8000dc4:	7023      	strb	r3, [r4, #0]
  char user_bad_msg[] = {" - Вы не создали свою мелодию! :("};
 8000dc6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000dca:	f103 0310 	add.w	r3, r3, #16
 8000dce:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8000dd2:	4a72      	ldr	r2, [pc, #456]	; (8000f9c <main+0x394>)
 8000dd4:	461c      	mov	r4, r3
 8000dd6:	4615      	mov	r5, r2
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de8:	e884 0003 	stmia.w	r4, {r0, r1}
  char gg_msg[] = {" - Мелодия не играет!"};
 8000dec:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000df0:	f103 0310 	add.w	r3, r3, #16
 8000df4:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 8000df8:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <main+0x398>)
 8000dfa:	461c      	mov	r4, r3
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e0a:	6020      	str	r0, [r4, #0]
 8000e0c:	3404      	adds	r4, #4
 8000e0e:	7021      	strb	r1, [r4, #0]

  // Сообщения Настройки пользовательской мелодии
  char prompt_msg[] = {
 8000e10:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000e14:	f103 0310 	add.w	r3, r3, #16
 8000e18:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8000e1c:	4a61      	ldr	r2, [pc, #388]	; (8000fa4 <main+0x39c>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	4611      	mov	r1, r2
 8000e22:	f240 1339 	movw	r3, #313	; 0x139
 8000e26:	461a      	mov	r2, r3
 8000e28:	f005 f8ce 	bl	8005fc8 <memcpy>
		  "Введите ваши ноты в данном формате:\r\n"
		  "\tЧАСТОТА,ДЛИТЕЛЬНОСТЬ\r\n"
          "Нажмите 'q', чтобы выйти.\r\n"
          "Нажмите 's', чтобы сохранить мелодию и выйти."
  };
  char note_save_msg[] = {" - Нота сохранена!"};
 8000e2c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000e30:	f103 0310 	add.w	r3, r3, #16
 8000e34:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 8000e38:	4a5b      	ldr	r2, [pc, #364]	; (8000fa8 <main+0x3a0>)
 8000e3a:	461c      	mov	r4, r3
 8000e3c:	4615      	mov	r5, r2
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char invalid_input_msg[] = {" - Неправильный формат! Попробуйте снова."};
 8000e4a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000e4e:	f103 0310 	add.w	r3, r3, #16
 8000e52:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8000e56:	4a55      	ldr	r2, [pc, #340]	; (8000fac <main+0x3a4>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	234b      	movs	r3, #75	; 0x4b
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f005 f8b2 	bl	8005fc8 <memcpy>
  char input_limit_reached_msg[] = { "\r\nВаша мелодия слишком длинная :(" };
 8000e64:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000e68:	f103 0310 	add.w	r3, r3, #16
 8000e6c:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8000e70:	4a4f      	ldr	r2, [pc, #316]	; (8000fb0 <main+0x3a8>)
 8000e72:	461c      	mov	r4, r3
 8000e74:	4615      	mov	r5, r2
 8000e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e86:	c403      	stmia	r4!, {r0, r1}
 8000e88:	8022      	strh	r2, [r4, #0]
 8000e8a:	3402      	adds	r4, #2
 8000e8c:	0c13      	lsrs	r3, r2, #16
 8000e8e:	7023      	strb	r3, [r4, #0]
  char save_msg[] = {" - Вы успешно сохранили вашу мелодию и вышли!"};
 8000e90:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000e94:	f103 0310 	add.w	r3, r3, #16
 8000e98:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8000e9c:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <main+0x3ac>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	2351      	movs	r3, #81	; 0x51
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f005 f88f 	bl	8005fc8 <memcpy>
  char exit_msg[] = {" - Вы вышли из решима настройки вашей мелодии!"};
 8000eaa:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000eae:	f103 0310 	add.w	r3, r3, #16
 8000eb2:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <main+0x3b0>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4611      	mov	r1, r2
 8000ebc:	2353      	movs	r3, #83	; 0x53
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f005 f882 	bl	8005fc8 <memcpy>

  char test_keyboard_on[] = {"Тестовый режим запущен!"};
 8000ec4:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000ec8:	f103 0310 	add.w	r3, r3, #16
 8000ecc:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8000ed0:	4a3a      	ldr	r2, [pc, #232]	; (8000fbc <main+0x3b4>)
 8000ed2:	461c      	mov	r4, r3
 8000ed4:	4615      	mov	r5, r2
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  char test_keyboard_off[] = {"Прикладной режим запущен!"};
 8000ee6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000eea:	f103 0310 	add.w	r3, r3, #16
 8000eee:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8000ef2:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <main+0x3b8>)
 8000ef4:	461c      	mov	r4, r3
 8000ef6:	4615      	mov	r5, r2
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  set_green_led(false);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fe59 	bl	8000bc0 <set_green_led>


  disable_interrupt(&status);
 8000f0e:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <main+0x3bc>)
 8000f10:	f7ff fbb3 	bl	800067a <disable_interrupt>
  buf_init(&ringBufferRx);
 8000f14:	482c      	ldr	r0, [pc, #176]	; (8000fc8 <main+0x3c0>)
 8000f16:	f7ff faf3 	bl	8000500 <buf_init>
  buf_init(&ringBufferTx);
 8000f1a:	482c      	ldr	r0, [pc, #176]	; (8000fcc <main+0x3c4>)
 8000f1c:	f7ff faf0 	bl	8000500 <buf_init>


  while (1)
  {
	  if (prog_start){
 8000f20:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000f24:	f103 030f 	add.w	r3, r3, #15
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00e      	beq.n	8000f4c <main+0x344>
	  		  transmit_uart_nl(&status, hello_msg, sizeof(hello_msg));
 8000f2e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000f32:	f103 0314 	add.w	r3, r3, #20
 8000f36:	225b      	movs	r2, #91	; 0x5b
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <main+0x3bc>)
 8000f3c:	f7ff fbda 	bl	80006f4 <transmit_uart_nl>
	  		  prog_start = false;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000f46:	f102 020f 	add.w	r2, r2, #15
 8000f4a:	7013      	strb	r3, [r2, #0]
	  	  }

	  bool btn_state = is_btn_press();
 8000f4c:	f7ff fcdc 	bl	8000908 <is_btn_press>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f56:	f102 021e 	add.w	r2, r2, #30
 8000f5a:	7013      	strb	r3, [r2, #0]
	  if (last_btn_state && !btn_state){
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <main+0x3c8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	e037      	b.n	8000fd4 <main+0x3cc>
 8000f64:	20001858 	.word	0x20001858
 8000f68:	20001898 	.word	0x20001898
 8000f6c:	08006020 	.word	0x08006020
 8000f70:	0800607c 	.word	0x0800607c
 8000f74:	08006108 	.word	0x08006108
 8000f78:	08006234 	.word	0x08006234
 8000f7c:	0800636c 	.word	0x0800636c
 8000f80:	080064c0 	.word	0x080064c0
 8000f84:	080064ec 	.word	0x080064ec
 8000f88:	08006514 	.word	0x08006514
 8000f8c:	08006540 	.word	0x08006540
 8000f90:	0800656c 	.word	0x0800656c
 8000f94:	08006588 	.word	0x08006588
 8000f98:	080065ac 	.word	0x080065ac
 8000f9c:	080065dc 	.word	0x080065dc
 8000fa0:	08006614 	.word	0x08006614
 8000fa4:	0800663c 	.word	0x0800663c
 8000fa8:	08006778 	.word	0x08006778
 8000fac:	08006798 	.word	0x08006798
 8000fb0:	080067e4 	.word	0x080067e4
 8000fb4:	08006820 	.word	0x08006820
 8000fb8:	08006874 	.word	0x08006874
 8000fbc:	080068c8 	.word	0x080068c8
 8000fc0:	080068f4 	.word	0x080068f4
 8000fc4:	20005924 	.word	0x20005924
 8000fc8:	20001918 	.word	0x20001918
 8000fcc:	2000391c 	.word	0x2000391c
 8000fd0:	20006141 	.word	0x20006141
 8000fd4:	d02b      	beq.n	800102e <main+0x426>
 8000fd6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000fda:	f103 031e 	add.w	r3, r3, #30
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d021      	beq.n	800102e <main+0x426>
		  is_test_keyboard_mode = !is_test_keyboard_mode;
 8000fea:	4bac      	ldr	r3, [pc, #688]	; (800129c <main+0x694>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f083 0301 	eor.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4ba5      	ldr	r3, [pc, #660]	; (800129c <main+0x694>)
 8001006:	701a      	strb	r2, [r3, #0]
		  if (is_test_keyboard_mode) transmit_uart_nl(&status, test_keyboard_on, sizeof(test_keyboard_on));
 8001008:	4ba4      	ldr	r3, [pc, #656]	; (800129c <main+0x694>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <main+0x418>
 8001010:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8001014:	222c      	movs	r2, #44	; 0x2c
 8001016:	4619      	mov	r1, r3
 8001018:	48a1      	ldr	r0, [pc, #644]	; (80012a0 <main+0x698>)
 800101a:	f7ff fb6b 	bl	80006f4 <transmit_uart_nl>
 800101e:	e006      	b.n	800102e <main+0x426>
		  else transmit_uart_nl(&status, test_keyboard_off, sizeof(test_keyboard_off));
 8001020:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001024:	2230      	movs	r2, #48	; 0x30
 8001026:	4619      	mov	r1, r3
 8001028:	489d      	ldr	r0, [pc, #628]	; (80012a0 <main+0x698>)
 800102a:	f7ff fb63 	bl	80006f4 <transmit_uart_nl>
	  }
	  last_btn_state = btn_state;
 800102e:	4a9d      	ldr	r2, [pc, #628]	; (80012a4 <main+0x69c>)
 8001030:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001034:	f103 031e 	add.w	r3, r3, #30
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	7013      	strb	r3, [r2, #0]

	  int btn_index = get_pressed_btn_index();
 800103c:	f7ff fc76 	bl	800092c <get_pressed_btn_index>
 8001040:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001044:	f103 0318 	add.w	r3, r3, #24
 8001048:	6018      	str	r0, [r3, #0]
	  if (btn_index != -1) {
 800104a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800104e:	f103 0318 	add.w	r3, r3, #24
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	f43f af62 	beq.w	8000f20 <main+0x318>
		  char received_char[] = {key2char(btn_index)};
 800105c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001060:	f103 0318 	add.w	r3, r3, #24
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f7ff fd81 	bl	8000b6c <key2char>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001072:	f103 0310 	add.w	r3, r3, #16
 8001076:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 800107a:	701a      	strb	r2, [r3, #0]

		  if (is_test_keyboard_mode){
 800107c:	4b87      	ldr	r3, [pc, #540]	; (800129c <main+0x694>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <main+0x48c>
			  transmit_uart_nl(&status, received_char, sizeof(received_char));
 8001084:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	4884      	ldr	r0, [pc, #528]	; (80012a0 <main+0x698>)
 800108e:	f7ff fb31 	bl	80006f4 <transmit_uart_nl>
 8001092:	e745      	b.n	8000f20 <main+0x318>
			  continue;
		  } else {
			  transmit_uart(&status, received_char, sizeof(received_char));
 8001094:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	4880      	ldr	r0, [pc, #512]	; (80012a0 <main+0x698>)
 800109e:	f7ff faf9 	bl	8000694 <transmit_uart>
		  }

		  switch (received_char[0]) {
 80010a2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80010a6:	f103 0310 	add.w	r3, r3, #16
 80010aa:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b3f      	cmp	r3, #63	; 0x3f
 80010b2:	dc6f      	bgt.n	8001194 <main+0x58c>
 80010b4:	2b0d      	cmp	r3, #13
 80010b6:	f2c0 830b 	blt.w	80016d0 <main+0xac8>
 80010ba:	3b0d      	subs	r3, #13
 80010bc:	2b32      	cmp	r3, #50	; 0x32
 80010be:	f200 8307 	bhi.w	80016d0 <main+0xac8>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <main+0x4c0>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080012e1 	.word	0x080012e1
 80010cc:	080016d1 	.word	0x080016d1
 80010d0:	080016d1 	.word	0x080016d1
 80010d4:	080016d1 	.word	0x080016d1
 80010d8:	080016d1 	.word	0x080016d1
 80010dc:	080016d1 	.word	0x080016d1
 80010e0:	080016d1 	.word	0x080016d1
 80010e4:	080016d1 	.word	0x080016d1
 80010e8:	080016d1 	.word	0x080016d1
 80010ec:	080016d1 	.word	0x080016d1
 80010f0:	080016d1 	.word	0x080016d1
 80010f4:	080016d1 	.word	0x080016d1
 80010f8:	080016d1 	.word	0x080016d1
 80010fc:	080016d1 	.word	0x080016d1
 8001100:	080016d1 	.word	0x080016d1
 8001104:	080016d1 	.word	0x080016d1
 8001108:	080016d1 	.word	0x080016d1
 800110c:	080016d1 	.word	0x080016d1
 8001110:	080016d1 	.word	0x080016d1
 8001114:	080016d1 	.word	0x080016d1
 8001118:	080016d1 	.word	0x080016d1
 800111c:	080016d1 	.word	0x080016d1
 8001120:	080016d1 	.word	0x080016d1
 8001124:	080016d1 	.word	0x080016d1
 8001128:	080016d1 	.word	0x080016d1
 800112c:	080016d1 	.word	0x080016d1
 8001130:	080016d1 	.word	0x080016d1
 8001134:	080016d1 	.word	0x080016d1
 8001138:	080016d1 	.word	0x080016d1
 800113c:	080016d1 	.word	0x080016d1
 8001140:	080016d1 	.word	0x080016d1
 8001144:	080016d1 	.word	0x080016d1
 8001148:	080016d1 	.word	0x080016d1
 800114c:	080016d1 	.word	0x080016d1
 8001150:	080016d1 	.word	0x080016d1
 8001154:	080016d1 	.word	0x080016d1
 8001158:	0800119b 	.word	0x0800119b
 800115c:	080011b5 	.word	0x080011b5
 8001160:	080011d1 	.word	0x080011d1
 8001164:	080011ed 	.word	0x080011ed
 8001168:	08001207 	.word	0x08001207
 800116c:	080016d1 	.word	0x080016d1
 8001170:	080016d1 	.word	0x080016d1
 8001174:	080016d1 	.word	0x080016d1
 8001178:	080016d1 	.word	0x080016d1
 800117c:	080016d1 	.word	0x080016d1
 8001180:	080016d1 	.word	0x080016d1
 8001184:	080016d1 	.word	0x080016d1
 8001188:	080016d1 	.word	0x080016d1
 800118c:	080016d1 	.word	0x080016d1
 8001190:	0800123f 	.word	0x0800123f
 8001194:	2b78      	cmp	r3, #120	; 0x78
 8001196:	d064      	beq.n	8001262 <main+0x65a>
 8001198:	e29a      	b.n	80016d0 <main+0xac8>
			  case '1': {
				  transmit_uart_nl(&status, starwars_msg, sizeof(starwars_msg));
 800119a:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 800119e:	222c      	movs	r2, #44	; 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	483f      	ldr	r0, [pc, #252]	; (80012a0 <main+0x698>)
 80011a4:	f7ff faa6 	bl	80006f4 <transmit_uart_nl>
				  play_melody(starwars2_melody, starwars2_delays, sizeof(starwars2_melody) / sizeof (uint32_t));
 80011a8:	2243      	movs	r2, #67	; 0x43
 80011aa:	493f      	ldr	r1, [pc, #252]	; (80012a8 <main+0x6a0>)
 80011ac:	483f      	ldr	r0, [pc, #252]	; (80012ac <main+0x6a4>)
 80011ae:	f7ff fafd 	bl	80007ac <play_melody>
				  break;
 80011b2:	e295      	b.n	80016e0 <main+0xad8>
			  }
			  case '2': {
			      transmit_uart_nl(&status, megalovania_msg, sizeof(megalovania_msg));
 80011b4:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 80011b8:	222a      	movs	r2, #42	; 0x2a
 80011ba:	4619      	mov	r1, r3
 80011bc:	4838      	ldr	r0, [pc, #224]	; (80012a0 <main+0x698>)
 80011be:	f7ff fa99 	bl	80006f4 <transmit_uart_nl>
			      play_melody(megalovania_melody, megalovania_delays, sizeof(megalovania_melody) / sizeof (uint32_t));
 80011c2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80011c6:	493a      	ldr	r1, [pc, #232]	; (80012b0 <main+0x6a8>)
 80011c8:	483a      	ldr	r0, [pc, #232]	; (80012b4 <main+0x6ac>)
 80011ca:	f7ff faef 	bl	80007ac <play_melody>
			      break;
 80011ce:	e287      	b.n	80016e0 <main+0xad8>
			  }
			  case '3': {
			      transmit_uart_nl(&status, zelda_msg, sizeof(zelda_msg));
 80011d0:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 80011d4:	2219      	movs	r2, #25
 80011d6:	4619      	mov	r1, r3
 80011d8:	4831      	ldr	r0, [pc, #196]	; (80012a0 <main+0x698>)
 80011da:	f7ff fa8b 	bl	80006f4 <transmit_uart_nl>
			      play_melody(zelda_melody, zelda_delays, sizeof(zelda_melody) / sizeof (uint32_t));
 80011de:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80011e2:	4935      	ldr	r1, [pc, #212]	; (80012b8 <main+0x6b0>)
 80011e4:	4835      	ldr	r0, [pc, #212]	; (80012bc <main+0x6b4>)
 80011e6:	f7ff fae1 	bl	80007ac <play_melody>
			      break;
 80011ea:	e279      	b.n	80016e0 <main+0xad8>
			  }
			  case '4': {
			      transmit_uart_nl(&status, simple_msg, sizeof(simple_msg));
 80011ec:	f607 3384 	addw	r3, r7, #2948	; 0xb84
 80011f0:	2223      	movs	r2, #35	; 0x23
 80011f2:	4619      	mov	r1, r3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <main+0x698>)
 80011f6:	f7ff fa7d 	bl	80006f4 <transmit_uart_nl>
			      play_melody(antoshka_melody, antoshka_delays, sizeof(antoshka_melody) / sizeof (uint32_t));
 80011fa:	2243      	movs	r2, #67	; 0x43
 80011fc:	4930      	ldr	r1, [pc, #192]	; (80012c0 <main+0x6b8>)
 80011fe:	4831      	ldr	r0, [pc, #196]	; (80012c4 <main+0x6bc>)
 8001200:	f7ff fad4 	bl	80007ac <play_melody>
			      break;
 8001204:	e26c      	b.n	80016e0 <main+0xad8>
			  }
			  case '5': {
				  if (user_melody_size != 0){
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <main+0x6c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00f      	beq.n	800122e <main+0x626>
					  transmit_uart_nl(&status, user_msg, sizeof(user_msg));
 800120e:	f607 3354 	addw	r3, r7, #2900	; 0xb54
 8001212:	222d      	movs	r2, #45	; 0x2d
 8001214:	4619      	mov	r1, r3
 8001216:	4822      	ldr	r0, [pc, #136]	; (80012a0 <main+0x698>)
 8001218:	f7ff fa6c 	bl	80006f4 <transmit_uart_nl>
					  play_melody(user_melody, user_delays, user_melody_size + 1);
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <main+0x6c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	461a      	mov	r2, r3
 8001224:	4929      	ldr	r1, [pc, #164]	; (80012cc <main+0x6c4>)
 8001226:	482a      	ldr	r0, [pc, #168]	; (80012d0 <main+0x6c8>)
 8001228:	f7ff fac0 	bl	80007ac <play_melody>
					  break;
 800122c:	e258      	b.n	80016e0 <main+0xad8>
				  }
			      transmit_uart_nl(&status, user_bad_msg, sizeof(user_bad_msg));
 800122e:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 8001232:	2238      	movs	r2, #56	; 0x38
 8001234:	4619      	mov	r1, r3
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <main+0x698>)
 8001238:	f7ff fa5c 	bl	80006f4 <transmit_uart_nl>
			      break;
 800123c:	e250      	b.n	80016e0 <main+0xad8>
			  }
			  case '?': {
				  transmit_uart_nl(&status, layout_music, sizeof(layout_music));
 800123e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001242:	f103 0308 	add.w	r3, r3, #8
 8001246:	228a      	movs	r2, #138	; 0x8a
 8001248:	4619      	mov	r1, r3
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <main+0x698>)
 800124c:	f7ff fa52 	bl	80006f4 <transmit_uart_nl>
				  transmit_uart_nl(&status, list_melody_msg, sizeof(list_melody_msg));
 8001250:	f607 53c4 	addw	r3, r7, #3524	; 0xdc4
 8001254:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001258:	4619      	mov	r1, r3
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <main+0x698>)
 800125c:	f7ff fa4a 	bl	80006f4 <transmit_uart_nl>
				  break;
 8001260:	e23e      	b.n	80016e0 <main+0xad8>
			  }
			  case 'x': {
				  if (!melody_playing) {
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <main+0x6cc>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <main+0x678>
					  transmit_uart_nl(&status, gg_msg, sizeof(gg_msg));
 8001270:	f607 23f4 	addw	r3, r7, #2804	; 0xaf4
 8001274:	2225      	movs	r2, #37	; 0x25
 8001276:	4619      	mov	r1, r3
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <main+0x698>)
 800127a:	f7ff fa3b 	bl	80006f4 <transmit_uart_nl>
					  break;
 800127e:	e22f      	b.n	80016e0 <main+0xad8>
				  }
				  play_melody(stop_melody, stop_delays, sizeof(stop_melody) / sizeof (uint32_t));
 8001280:	2201      	movs	r2, #1
 8001282:	4915      	ldr	r1, [pc, #84]	; (80012d8 <main+0x6d0>)
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <main+0x6d4>)
 8001286:	f7ff fa91 	bl	80007ac <play_melody>
				  transmit_uart_nl(&status, stop_melody_msg, sizeof(stop_melody_msg));
 800128a:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 800128e:	222a      	movs	r2, #42	; 0x2a
 8001290:	4619      	mov	r1, r3
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <main+0x698>)
 8001294:	f7ff fa2e 	bl	80006f4 <transmit_uart_nl>
				  break;
 8001298:	e222      	b.n	80016e0 <main+0xad8>
 800129a:	bf00      	nop
 800129c:	20006140 	.word	0x20006140
 80012a0:	20005924 	.word	0x20005924
 80012a4:	20006141 	.word	0x20006141
 80012a8:	2000010c 	.word	0x2000010c
 80012ac:	20000000 	.word	0x20000000
 80012b0:	2000098c 	.word	0x2000098c
 80012b4:	2000042c 	.word	0x2000042c
 80012b8:	2000131c 	.word	0x2000131c
 80012bc:	20000eec 	.word	0x20000eec
 80012c0:	20000324 	.word	0x20000324
 80012c4:	20000218 	.word	0x20000218
 80012c8:	20006130 	.word	0x20006130
 80012cc:	20005d30 	.word	0x20005d30
 80012d0:	20005930 	.word	0x20005930
 80012d4:	2000179c 	.word	0x2000179c
 80012d8:	20001794 	.word	0x20001794
 80012dc:	20001800 	.word	0x20001800
			  }
			  case '\r': {
				  bool settings_start = true;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80012e6:	f102 020e 	add.w	r2, r2, #14
 80012ea:	7013      	strb	r3, [r2, #0]

				  uint32_t cur_melody[256];
				  uint32_t cur_delays[256];
				  uint32_t cur_size = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80012f2:	f102 0208 	add.w	r2, r2, #8
 80012f6:	6013      	str	r3, [r2, #0]

				  uint32_t note = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80012fe:	f102 0204 	add.w	r2, r2, #4
 8001302:	6013      	str	r3, [r2, #0]
				  uint32_t delay = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800130a:	6013      	str	r3, [r2, #0]
				  bool comma_encountered = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001312:	f102 021f 	add.w	r2, r2, #31
 8001316:	7013      	strb	r3, [r2, #0]

				  set_green_led(true);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fc51 	bl	8000bc0 <set_green_led>

				  is_music_mode = false;
 800131e:	4bc2      	ldr	r3, [pc, #776]	; (8001628 <main+0xa20>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]

				  while (1) {
					  if (settings_start){
 8001324:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001328:	f103 030e 	add.w	r3, r3, #14
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d015      	beq.n	800135e <main+0x756>
						  transmit_uart_nl(&status, prompt_msg, sizeof(prompt_msg));
 8001332:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8001336:	f240 1239 	movw	r2, #313	; 0x139
 800133a:	4619      	mov	r1, r3
 800133c:	48bb      	ldr	r0, [pc, #748]	; (800162c <main+0xa24>)
 800133e:	f7ff f9d9 	bl	80006f4 <transmit_uart_nl>
						  transmit_uart_nl(&status, layout_settings, sizeof(layout_settings));
 8001342:	f607 63fc 	addw	r3, r7, #3836	; 0xefc
 8001346:	f240 122b 	movw	r2, #299	; 0x12b
 800134a:	4619      	mov	r1, r3
 800134c:	48b7      	ldr	r0, [pc, #732]	; (800162c <main+0xa24>)
 800134e:	f7ff f9d1 	bl	80006f4 <transmit_uart_nl>
						  settings_start = false;
 8001352:	2300      	movs	r3, #0
 8001354:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001358:	f102 020e 	add.w	r2, r2, #14
 800135c:	7013      	strb	r3, [r2, #0]
					  }

					  int btn_index = get_pressed_btn_index();
 800135e:	f7ff fae5 	bl	800092c <get_pressed_btn_index>
 8001362:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001366:	f103 0314 	add.w	r3, r3, #20
 800136a:	6018      	str	r0, [r3, #0]
					  if (btn_index != -1) {
 800136c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001370:	f103 0314 	add.w	r3, r3, #20
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137a:	d0d3      	beq.n	8001324 <main+0x71c>
						  char received_char[] = {key2char(btn_index)};
 800137c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001380:	f103 0314 	add.w	r3, r3, #20
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f7ff fbf1 	bl	8000b6c <key2char>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001392:	f103 0310 	add.w	r3, r3, #16
 8001396:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800139a:	701a      	strb	r2, [r3, #0]
						  if (received_char[0] != 'e'){
 800139c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80013a0:	f103 0310 	add.w	r3, r3, #16
 80013a4:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b65      	cmp	r3, #101	; 0x65
 80013ac:	d010      	beq.n	80013d0 <main+0x7c8>
							  transmit_uart(&status, received_char, sizeof(received_char));
 80013ae:	f607 0304 	addw	r3, r7, #2052	; 0x804
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	489d      	ldr	r0, [pc, #628]	; (800162c <main+0xa24>)
 80013b8:	f7ff f96c 	bl	8000694 <transmit_uart>
							  set_red_led(is_settings_2);
							  set_green_led(!is_settings_2);
							  continue;
						  }

						  if (received_char[0] == '?'){
 80013bc:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80013c0:	f103 0310 	add.w	r3, r3, #16
 80013c4:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b3f      	cmp	r3, #63	; 0x3f
 80013cc:	d136      	bne.n	800143c <main+0x834>
 80013ce:	e024      	b.n	800141a <main+0x812>
							  is_settings_2 = !is_settings_2;
 80013d0:	4b97      	ldr	r3, [pc, #604]	; (8001630 <main+0xa28>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b91      	ldr	r3, [pc, #580]	; (8001630 <main+0xa28>)
 80013ec:	701a      	strb	r2, [r3, #0]
							  set_red_led(is_settings_2);
 80013ee:	4b90      	ldr	r3, [pc, #576]	; (8001630 <main+0xa28>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fbf6 	bl	8000be4 <set_red_led>
							  set_green_led(!is_settings_2);
 80013f8:	4b8d      	ldr	r3, [pc, #564]	; (8001630 <main+0xa28>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f083 0301 	eor.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fbd4 	bl	8000bc0 <set_green_led>
							  continue;
 8001418:	e159      	b.n	80016ce <main+0xac6>
							  transmit_uart_nl(&status, layout_settings, sizeof(layout_settings));
 800141a:	f607 63fc 	addw	r3, r7, #3836	; 0xefc
 800141e:	f240 122b 	movw	r2, #299	; 0x12b
 8001422:	4619      	mov	r1, r3
 8001424:	4881      	ldr	r0, [pc, #516]	; (800162c <main+0xa24>)
 8001426:	f7ff f965 	bl	80006f4 <transmit_uart_nl>
							  transmit_uart_nl(&status, list_settings_msg, sizeof(list_settings_msg));
 800142a:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800142e:	f240 1253 	movw	r2, #339	; 0x153
 8001432:	4619      	mov	r1, r3
 8001434:	487d      	ldr	r0, [pc, #500]	; (800162c <main+0xa24>)
 8001436:	f7ff f95d 	bl	80006f4 <transmit_uart_nl>
							  continue;
 800143a:	e148      	b.n	80016ce <main+0xac6>
						  }

			              if (received_char[0] == 'q') {
 800143c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001440:	f103 0310 	add.w	r3, r3, #16
 8001444:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b71      	cmp	r3, #113	; 0x71
 800144c:	d113      	bne.n	8001476 <main+0x86e>
			            	  transmit_uart_nl(&status, exit_msg, sizeof(exit_msg));
 800144e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8001452:	2253      	movs	r2, #83	; 0x53
 8001454:	4619      	mov	r1, r3
 8001456:	4875      	ldr	r0, [pc, #468]	; (800162c <main+0xa24>)
 8001458:	f7ff f94c 	bl	80006f4 <transmit_uart_nl>
			            	  is_music_mode = true;
 800145c:	4b72      	ldr	r3, [pc, #456]	; (8001628 <main+0xa20>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
			            	  is_settings_2 = false;
 8001462:	4b73      	ldr	r3, [pc, #460]	; (8001630 <main+0xa28>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
			            	  set_green_led(0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fba9 	bl	8000bc0 <set_green_led>
			            	  set_red_led(0);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fbb8 	bl	8000be4 <set_red_led>
			                  break;
 8001474:	e12a      	b.n	80016cc <main+0xac4>
			              }

			              if (received_char[0] == 's') {
 8001476:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800147a:	f103 0310 	add.w	r3, r3, #16
 800147e:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b73      	cmp	r3, #115	; 0x73
 8001486:	d12b      	bne.n	80014e0 <main+0x8d8>
			            	  is_music_mode = true;
 8001488:	4b67      	ldr	r3, [pc, #412]	; (8001628 <main+0xa20>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
			            	  is_settings_2 = false;
 800148e:	4b68      	ldr	r3, [pc, #416]	; (8001630 <main+0xa28>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			            	  transmit_uart_nl(&status, save_msg, sizeof(save_msg));
 8001494:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8001498:	2251      	movs	r2, #81	; 0x51
 800149a:	4619      	mov	r1, r3
 800149c:	4863      	ldr	r0, [pc, #396]	; (800162c <main+0xa24>)
 800149e:	f7ff f929 	bl	80006f4 <transmit_uart_nl>
			                  memcpy(user_melody, cur_melody, sizeof(user_melody) / sizeof (uint32_t));
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	3b0c      	subs	r3, #12
 80014a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ac:	4619      	mov	r1, r3
 80014ae:	4861      	ldr	r0, [pc, #388]	; (8001634 <main+0xa2c>)
 80014b0:	f004 fd8a 	bl	8005fc8 <memcpy>
			                  memcpy(user_delays, cur_delays, sizeof(user_melody) / sizeof (uint32_t));
 80014b4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80014b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014bc:	4619      	mov	r1, r3
 80014be:	485e      	ldr	r0, [pc, #376]	; (8001638 <main+0xa30>)
 80014c0:	f004 fd82 	bl	8005fc8 <memcpy>
			                  user_melody_size = cur_size;
 80014c4:	4a5d      	ldr	r2, [pc, #372]	; (800163c <main+0xa34>)
 80014c6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80014ca:	f103 0308 	add.w	r3, r3, #8
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6013      	str	r3, [r2, #0]
			                  set_green_led(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fb74 	bl	8000bc0 <set_green_led>
			                  set_red_led(0);
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fb83 	bl	8000be4 <set_red_led>
			                  break;
 80014de:	e0f5      	b.n	80016cc <main+0xac4>
			              }

			              if (received_char[0] == ',') {
 80014e0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80014e4:	f103 0310 	add.w	r3, r3, #16
 80014e8:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b2c      	cmp	r3, #44	; 0x2c
 80014f0:	d125      	bne.n	800153e <main+0x936>
			                  if (comma_encountered) {
 80014f2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80014f6:	f103 031f 	add.w	r3, r3, #31
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d017      	beq.n	8001530 <main+0x928>
			                      transmit_uart_nl(&status, invalid_input_msg, sizeof(invalid_input_msg));
 8001500:	f607 134c 	addw	r3, r7, #2380	; 0x94c
 8001504:	224b      	movs	r2, #75	; 0x4b
 8001506:	4619      	mov	r1, r3
 8001508:	4848      	ldr	r0, [pc, #288]	; (800162c <main+0xa24>)
 800150a:	f7ff f8f3 	bl	80006f4 <transmit_uart_nl>
			                      note = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001514:	f102 0204 	add.w	r2, r2, #4
 8001518:	6013      	str	r3, [r2, #0]
			                      delay = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001520:	6013      	str	r3, [r2, #0]
			                      comma_encountered = false;
 8001522:	2300      	movs	r3, #0
 8001524:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001528:	f102 021f 	add.w	r2, r2, #31
 800152c:	7013      	strb	r3, [r2, #0]
			                      continue;
 800152e:	e0ce      	b.n	80016ce <main+0xac6>
			                  }
			                  comma_encountered = true;
 8001530:	2301      	movs	r3, #1
 8001532:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001536:	f102 021f 	add.w	r2, r2, #31
 800153a:	7013      	strb	r3, [r2, #0]
			                  continue;
 800153c:	e0c7      	b.n	80016ce <main+0xac6>
			              }

			              if (received_char[0] == '\r') {
 800153e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001542:	f103 0310 	add.w	r3, r3, #16
 8001546:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b0d      	cmp	r3, #13
 800154e:	d144      	bne.n	80015da <main+0x9d2>
			                  transmit_uart_nl(&status, empty_msg, sizeof(empty_msg));
 8001550:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001554:	f103 0310 	add.w	r3, r3, #16
 8001558:	2202      	movs	r2, #2
 800155a:	4619      	mov	r1, r3
 800155c:	4833      	ldr	r0, [pc, #204]	; (800162c <main+0xa24>)
 800155e:	f7ff f8c9 	bl	80006f4 <transmit_uart_nl>
			                  cur_melody[cur_size] = note;
 8001562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800156a:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800156e:	f102 0208 	add.w	r2, r2, #8
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	f507 5189 	add.w	r1, r7, #4384	; 0x1120
 8001578:	f101 0104 	add.w	r1, r1, #4
 800157c:	6809      	ldr	r1, [r1, #0]
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			                  cur_delays[cur_size] = delay;
 8001582:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001586:	f103 0310 	add.w	r3, r3, #16
 800158a:	f6a3 532c 	subw	r3, r3, #3372	; 0xd2c
 800158e:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001592:	f102 0208 	add.w	r2, r2, #8
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f507 5189 	add.w	r1, r7, #4384	; 0x1120
 800159c:	6809      	ldr	r1, [r1, #0]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			                  cur_size++;
 80015a2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80015a6:	f103 0308 	add.w	r3, r3, #8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80015b2:	f102 0208 	add.w	r2, r2, #8
 80015b6:	6013      	str	r3, [r2, #0]

			                  note = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80015be:	f102 0204 	add.w	r2, r2, #4
 80015c2:	6013      	str	r3, [r2, #0]
			                  delay = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80015ca:	6013      	str	r3, [r2, #0]
			                  comma_encountered = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80015d2:	f102 021f 	add.w	r2, r2, #31
 80015d6:	7013      	strb	r3, [r2, #0]
			                  continue;
 80015d8:	e079      	b.n	80016ce <main+0xac6>
			              }

			              if (!isdigit(received_char[0])) {
 80015da:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80015de:	f103 0310 	add.w	r3, r3, #16
 80015e2:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <main+0xa38>)
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d125      	bne.n	8001644 <main+0xa3c>
			                  transmit_uart_nl(&status, invalid_input_msg, sizeof(invalid_input_msg));
 80015f8:	f607 134c 	addw	r3, r7, #2380	; 0x94c
 80015fc:	224b      	movs	r2, #75	; 0x4b
 80015fe:	4619      	mov	r1, r3
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <main+0xa24>)
 8001602:	f7ff f877 	bl	80006f4 <transmit_uart_nl>
			                  note = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800160c:	f102 0204 	add.w	r2, r2, #4
 8001610:	6013      	str	r3, [r2, #0]
			                  delay = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001618:	6013      	str	r3, [r2, #0]
			                  comma_encountered = false;
 800161a:	2300      	movs	r3, #0
 800161c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001620:	f102 021f 	add.w	r2, r2, #31
 8001624:	7013      	strb	r3, [r2, #0]
			                  continue;
 8001626:	e052      	b.n	80016ce <main+0xac6>
 8001628:	200017ac 	.word	0x200017ac
 800162c:	20005924 	.word	0x20005924
 8001630:	20006138 	.word	0x20006138
 8001634:	20005930 	.word	0x20005930
 8001638:	20005d30 	.word	0x20005d30
 800163c:	20006130 	.word	0x20006130
 8001640:	0800693c 	.word	0x0800693c
			              }

			              if (cur_size == 256) {
 8001644:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001648:	f103 0308 	add.w	r3, r3, #8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001652:	d106      	bne.n	8001662 <main+0xa5a>
			                  transmit_uart_nl(&status, input_limit_reached_msg, sizeof(input_limit_reached_msg));
 8001654:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001658:	223b      	movs	r2, #59	; 0x3b
 800165a:	4619      	mov	r1, r3
 800165c:	4821      	ldr	r0, [pc, #132]	; (80016e4 <main+0xadc>)
 800165e:	f7ff f849 	bl	80006f4 <transmit_uart_nl>
			              }

			              if (comma_encountered) {
 8001662:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001666:	f103 031f 	add.w	r3, r3, #31
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <main+0xa92>
			                  delay = delay * 10 + (received_char[0] - 48);
 8001670:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001684:	f103 0310 	add.w	r3, r3, #16
 8001688:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	3b30      	subs	r3, #48	; 0x30
 8001692:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e644      	b.n	8001324 <main+0x71c>
			              } else {
			                  note = note * 10 + (received_char[0] - 48);
 800169a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800169e:	f103 0304 	add.w	r3, r3, #4
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	461a      	mov	r2, r3
 80016ae:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80016b2:	f103 0310 	add.w	r3, r3, #16
 80016b6:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	3b30      	subs	r3, #48	; 0x30
 80016c0:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80016c4:	f102 0204 	add.w	r2, r2, #4
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e62b      	b.n	8001324 <main+0x71c>
			              }
			          }
				 }
			     break;
 80016cc:	e008      	b.n	80016e0 <main+0xad8>
				  while (1) {
 80016ce:	e629      	b.n	8001324 <main+0x71c>
			  default: {
			      transmit_uart_nl(&status, invalid_option_msg, sizeof(invalid_option_msg));
 80016d0:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80016d4:	2226      	movs	r2, #38	; 0x26
 80016d6:	4619      	mov	r1, r3
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <main+0xadc>)
 80016da:	f7ff f80b 	bl	80006f4 <transmit_uart_nl>
			      break;
 80016de:	bf00      	nop
  {
 80016e0:	e41e      	b.n	8000f20 <main+0x318>
 80016e2:	bf00      	nop
 80016e4:	20005924 	.word	0x20005924

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	; 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2230      	movs	r2, #48	; 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fc74 	bl	8005fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <SystemClock_Config+0xd8>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <SystemClock_Config+0xd8>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <SystemClock_Config+0xd8>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <SystemClock_Config+0xdc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <SystemClock_Config+0xdc>)
 8001732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <SystemClock_Config+0xdc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001744:	2301      	movs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174e:	2302      	movs	r3, #2
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001758:	230f      	movs	r3, #15
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800175c:	23d8      	movs	r3, #216	; 0xd8
 800175e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001760:	2302      	movs	r3, #2
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001764:	2304      	movs	r3, #4
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	4618      	mov	r0, r3
 800176e:	f001 ffdb 	bl	8003728 <HAL_RCC_OscConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001778:	f000 f9e6 	bl	8001b48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800177c:	f001 ff84 	bl	8003688 <HAL_PWREx_EnableOverDrive>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001786:	f000 f9df 	bl	8001b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178a:	230f      	movs	r3, #15
 800178c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800179a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2105      	movs	r1, #5
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fa2b 	bl	8003c04 <HAL_RCC_ClockConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80017b4:	f000 f9c8 	bl	8001b48 <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	; 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000

080017c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_I2C1_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_I2C1_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_I2C1_Init+0x74>)
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <MX_I2C1_Init+0x7c>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_I2C1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_I2C1_Init+0x74>)
 80017e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_I2C1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_I2C1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_I2C1_Init+0x74>)
 8001806:	f000 ff09 	bl	800261c <HAL_I2C_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001810:	f000 f99a 	bl	8001b48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001814:	2100      	movs	r1, #0
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <MX_I2C1_Init+0x74>)
 8001818:	f001 febb 	bl	8003592 <HAL_I2CEx_ConfigAnalogFilter>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001822:	f000 f991 	bl	8001b48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_I2C1_Init+0x74>)
 800182a:	f001 feee 	bl	800360a <HAL_I2CEx_ConfigDigitalFilter>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001834:	f000 f988 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20001804 	.word	0x20001804
 8001840:	40005400 	.word	0x40005400
 8001844:	00061a80 	.word	0x00061a80

08001848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b096      	sub	sp, #88	; 0x58
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2220      	movs	r2, #32
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f004 fbaf 	bl	8005fe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <MX_TIM1_Init+0x13c>)
 8001888:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <MX_TIM1_Init+0x140>)
 800188a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <MX_TIM1_Init+0x13c>)
 800188e:	2259      	movs	r2, #89	; 0x59
 8001890:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <MX_TIM1_Init+0x13c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <MX_TIM1_Init+0x13c>)
 800189a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b38      	ldr	r3, [pc, #224]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b2:	4834      	ldr	r0, [pc, #208]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018b4:	f002 fb86 	bl	8003fc4 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018be:	f000 f943 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018cc:	4619      	mov	r1, r3
 80018ce:	482d      	ldr	r0, [pc, #180]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018d0:	f002 fe08 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018da:	f000 f935 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018de:	4829      	ldr	r0, [pc, #164]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018e0:	f002 fbbf 	bl	8004062 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018ea:	f000 f92d 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fa:	4619      	mov	r1, r3
 80018fc:	4821      	ldr	r0, [pc, #132]	; (8001984 <MX_TIM1_Init+0x13c>)
 80018fe:	f003 f9ed 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001908:	f000 f91e 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001910:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	4814      	ldr	r0, [pc, #80]	; (8001984 <MX_TIM1_Init+0x13c>)
 8001934:	f002 fd10 	bl	8004358 <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800193e:	f000 f903 	bl	8001b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM1_Init+0x13c>)
 8001966:	f003 fa35 	bl	8004dd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001970:	f000 f8ea 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM1_Init+0x13c>)
 8001976:	f000 f99d 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3758      	adds	r7, #88	; 0x58
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20001858 	.word	0x20001858
 8001988:	40010000 	.word	0x40010000

0800198c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <MX_TIM6_Init+0x64>)
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <MX_TIM6_Init+0x68>)
 800199e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_TIM6_Init+0x64>)
 80019a2:	2259      	movs	r2, #89	; 0x59
 80019a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_TIM6_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_TIM6_Init+0x64>)
 80019ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_TIM6_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_TIM6_Init+0x64>)
 80019bc:	f002 fb02 	bl	8003fc4 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80019c6:	f000 f8bf 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_TIM6_Init+0x64>)
 80019d8:	f003 f980 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019e2:	f000 f8b1 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20001898 	.word	0x20001898
 80019f4:	40001000 	.word	0x40001000

080019f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <MX_USART6_UART_Init+0x50>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a30:	f003 fa36 	bl	8004ea0 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a3a:	f000 f885 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200018d8 	.word	0x200018d8
 8001a48:	40011400 	.word	0x40011400

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001af4:	4812      	ldr	r0, [pc, #72]	; (8001b40 <MX_GPIO_Init+0xf4>)
 8001af6:	f000 fd77 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <MX_GPIO_Init+0xf8>)
 8001b10:	f000 fba6 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b14:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_GPIO_Init+0xf4>)
 8001b2e:	f000 fb97 	bl	8002260 <HAL_GPIO_Init>

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40020800 	.word	0x40020800

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_I2C_MspInit+0x84>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12c      	bne.n	8001c24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001be6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <HAL_I2C_MspInit+0x8c>)
 8001c04:	f000 fb2c 	bl	8002260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_TIM_Base_MspInit+0x70>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10e      	bne.n	8001c68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_TIM_Base_MspInit+0x74>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_TIM_Base_MspInit+0x74>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_TIM_Base_MspInit+0x74>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c66:	e01a      	b.n	8001c9e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_TIM_Base_MspInit+0x78>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d115      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_TIM_Base_MspInit+0x74>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0x74>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_Base_MspInit+0x74>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2036      	movs	r0, #54	; 0x36
 8001c94:	f000 fa8b 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c98:	2036      	movs	r0, #54	; 0x36
 8001c9a:	f000 faa4 	bl	80021e6 <HAL_NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40001000 	.word	0x40001000

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11e      	bne.n	8001d14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_TIM_MspPostInit+0x70>)
 8001d10:	f000 faa6 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_UART_MspInit+0x94>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d133      	bne.n	8001db2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d54:	f043 0320 	orr.w	r3, r3, #32
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d92:	2308      	movs	r3, #8
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <HAL_UART_MspInit+0x9c>)
 8001d9e:	f000 fa5f 	bl	8002260 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2047      	movs	r0, #71	; 0x47
 8001da8:	f000 fa01 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dac:	2047      	movs	r0, #71	; 0x47
 8001dae:	f000 fa1a 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40011400 	.word	0x40011400
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020800 	.word	0x40020800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 f8a8 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM6_DAC_IRQHandler+0x10>)
 8001e2a:	f002 f98d 	bl	8004148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20001898 	.word	0x20001898

08001e38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <USART6_IRQHandler+0x10>)
 8001e3e:	f003 f95b 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200018d8 	.word	0x200018d8

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <SystemInit+0x28>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <SystemInit+0x28>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SystemInit+0x28>)
 8001e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e66:	609a      	str	r2, [r3, #8]
#endif
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e7e:	e003      	b.n	8001e88 <LoopCopyDataInit>

08001e80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e86:	3104      	adds	r1, #4

08001e88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e90:	d3f6      	bcc.n	8001e80 <CopyDataInit>
  ldr  r2, =_sbss
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e94:	e002      	b.n	8001e9c <LoopFillZerobss>

08001e96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e98:	f842 3b04 	str.w	r3, [r2], #4

08001e9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ea0:	d3f9      	bcc.n	8001e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ea2:	f7ff ffd3 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f004 f86b 	bl	8005f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eaa:	f7fe fead 	bl	8000c08 <main>
  bx  lr    
 8001eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001eb4:	08006a50 	.word	0x08006a50
  ldr  r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ebc:	200017e4 	.word	0x200017e4
  ldr  r2, =_sbss
 8001ec0:	200017e4 	.word	0x200017e4
  ldr  r3, = _ebss
 8001ec4:	20006164 	.word	0x20006164

08001ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f94f 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fe2a 	bl	8001b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f967 	bl	8002202 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f92f 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200017d8 	.word	0x200017d8
 8001f68:	200017e0 	.word	0x200017e0
 8001f6c:	200017dc 	.word	0x200017dc

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200017e0 	.word	0x200017e0
 8001f94:	20006160 	.word	0x20006160

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20006160 	.word	0x20006160

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200017e0 	.word	0x200017e0

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e00c      	b.n	8002252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2205      	movs	r2, #5
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e177      	b.n	800256c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 8166 	bne.w	8002566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d00b      	beq.n	80022ba <HAL_GPIO_Init+0x5a>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0xfc>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80c0 	beq.w	8002566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a65      	ldr	r2, [pc, #404]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a61      	ldr	r2, [pc, #388]	; (8002588 <HAL_GPIO_Init+0x328>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_GPIO_Init+0x32c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d037      	beq.n	800249e <HAL_GPIO_Init+0x23e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_GPIO_Init+0x330>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0x23a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_GPIO_Init+0x334>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x236>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x338>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x232>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_GPIO_Init+0x33c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_GPIO_Init+0x340>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x344>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x348>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x34c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x350>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x21a>
 8002476:	2309      	movs	r3, #9
 8002478:	e012      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247a:	230a      	movs	r3, #10
 800247c:	e010      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247e:	2308      	movs	r3, #8
 8002480:	e00e      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002482:	2307      	movs	r3, #7
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002486:	2306      	movs	r3, #6
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_GPIO_Init+0x328>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250c:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f ae84 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40021c00 	.word	0x40021c00
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022400 	.word	0x40022400
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e12b      	b.n	8002886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fab0 	bl	8001ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f001 fc78 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a81      	ldr	r2, [pc, #516]	; (8002890 <HAL_I2C_Init+0x274>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <HAL_I2C_Init+0x84>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_I2C_Init+0x278>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e006      	b.n	80026ae <HAL_I2C_Init+0x92>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_I2C_Init+0x27c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e7      	b.n	8002886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a78      	ldr	r2, [pc, #480]	; (800289c <HAL_I2C_Init+0x280>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_I2C_Init+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <HAL_I2C_Init+0xd4>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e009      	b.n	8002704 <HAL_I2C_Init+0xe8>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_I2C_Init+0x284>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	3301      	adds	r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	495c      	ldr	r1, [pc, #368]	; (8002890 <HAL_I2C_Init+0x274>)
 8002720:	428b      	cmp	r3, r1
 8002722:	d819      	bhi.n	8002758 <HAL_I2C_Init+0x13c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e59      	subs	r1, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_I2C_Init+0x138>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e59      	subs	r1, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	e051      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002754:	2304      	movs	r3, #4
 8002756:	e04f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <HAL_I2C_Init+0x168>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e012      	b.n	80027aa <HAL_I2C_Init+0x18e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x196>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e022      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_I2C_Init+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e58      	subs	r0, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	440b      	add	r3, r1
 80027c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6809      	ldr	r1, [r1, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6911      	ldr	r1, [r2, #16]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	000186a0 	.word	0x000186a0
 8002894:	001e847f 	.word	0x001e847f
 8002898:	003d08ff 	.word	0x003d08ff
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	460b      	mov	r3, r1
 80028b8:	813b      	strh	r3, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028be:	f7ff fb6b 	bl	8001f98 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 80d9 	bne.w	8002a84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2319      	movs	r3, #25
 80028d8:	2201      	movs	r2, #1
 80028da:	496d      	ldr	r1, [pc, #436]	; (8002a90 <HAL_I2C_Mem_Write+0x1ec>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fc7b 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0cc      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Mem_Write+0x56>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0c5      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d007      	beq.n	8002920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	; 0x21
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a4d      	ldr	r2, [pc, #308]	; (8002a94 <HAL_I2C_Mem_Write+0x1f0>)
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002962:	88f8      	ldrh	r0, [r7, #6]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	8979      	ldrh	r1, [r7, #10]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4603      	mov	r3, r0
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fab6 	bl	8002ee4 <I2C_RequestMemoryWrite>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d052      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e081      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fcfc 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b04      	cmp	r3, #4
 8002998:	d107      	bne.n	80029aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11b      	bne.n	8002a24 <HAL_I2C_Mem_Write+0x180>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1aa      	bne.n	8002982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fce8 	bl	8003406 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d107      	bne.n	8002a54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e016      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	00100002 	.word	0x00100002
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab2:	f7ff fa71 	bl	8001f98 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	f040 8208 	bne.w	8002ed6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2319      	movs	r3, #25
 8002acc:	2201      	movs	r2, #1
 8002ace:	497b      	ldr	r1, [pc, #492]	; (8002cbc <HAL_I2C_Mem_Read+0x224>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fb81 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e1fb      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Read+0x56>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e1f4      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2222      	movs	r2, #34	; 0x22
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_I2C_Mem_Read+0x228>)
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b56:	88f8      	ldrh	r0, [r7, #6]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fa50 	bl	800300c <I2C_RequestMemoryRead>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1b0      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e184      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d11b      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e164      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d11b      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	e144      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c3c:	e138      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	f200 80f1 	bhi.w	8002e2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d123      	bne.n	8002c98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fc17 	bl	8003488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e139      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c96:	e10b      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d14e      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4906      	ldr	r1, [pc, #24]	; (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fa94 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e10e      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
 8002cba:	bf00      	nop
 8002cbc:	00100002 	.word	0x00100002
 8002cc0:	ffff0000 	.word	0xffff0000
 8002cc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d3c:	e0b8      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2200      	movs	r2, #0
 8002d46:	4966      	ldr	r1, [pc, #408]	; (8002ee0 <HAL_I2C_Mem_Read+0x448>)
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fa45 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0bf      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2200      	movs	r2, #0
 8002da2:	494f      	ldr	r1, [pc, #316]	; (8002ee0 <HAL_I2C_Mem_Read+0x448>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa17 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e091      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e28:	e042      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fb2a 	bl	8003488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e04c      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d118      	bne.n	8002eb0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f aec2 	bne.w	8002c3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	00010004 	.word	0x00010004

08002ee4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	4608      	mov	r0, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	817b      	strh	r3, [r7, #10]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	813b      	strh	r3, [r7, #8]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f95c 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e05f      	b.n	8003000 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	492c      	ldr	r1, [pc, #176]	; (8003008 <I2C_RequestMemoryWrite+0x124>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f995 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04c      	b.n	8003000 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	6a39      	ldr	r1, [r7, #32]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f9ff 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e02b      	b.n	8003000 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d105      	bne.n	8002fba <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fae:	893b      	ldrh	r3, [r7, #8]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]
 8002fb8:	e021      	b.n	8002ffe <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f9d9 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e005      	b.n	8003000 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff4:	893b      	ldrh	r3, [r7, #8]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	00010002 	.word	0x00010002

0800300c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	817b      	strh	r3, [r7, #10]
 800301e:	460b      	mov	r3, r1
 8003020:	813b      	strh	r3, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003034:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2200      	movs	r2, #0
 800304e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8c0 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0a9      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003086:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	6a3a      	ldr	r2, [r7, #32]
 800308c:	4951      	ldr	r1, [pc, #324]	; (80031d4 <I2C_RequestMemoryRead+0x1c8>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8f9 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e096      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	6a39      	ldr	r1, [r7, #32]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f963 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d107      	bne.n	80030dc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e075      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e6:	893b      	ldrh	r3, [r7, #8]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]
 80030f0:	e021      	b.n	8003136 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	6a39      	ldr	r1, [r7, #32]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f93d 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e04f      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f922 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e034      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2200      	movs	r2, #0
 800317a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f82a 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e013      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031a4:	897b      	ldrh	r3, [r7, #10]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	6a3a      	ldr	r2, [r7, #32]
 80031b8:	4906      	ldr	r1, [pc, #24]	; (80031d4 <I2C_RequestMemoryRead+0x1c8>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f863 	bl	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	00010002 	.word	0x00010002

080031d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e8:	e025      	b.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d021      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe fed1 	bl	8001f98 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d116      	bne.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e023      	b.n	800327e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10d      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	e00c      	b.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d0b6      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003294:	e051      	b.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d123      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e046      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fe4f 	bl	8001f98 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e020      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10c      	bne.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e00b      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d18d      	bne.n	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003390:	e02d      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8ce 	bl	8003534 <I2C_IsAcknowledgeFailed>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02d      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fdf5 	bl	8001f98 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d1ca      	bne.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003412:	e02d      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f88d 	bl	8003534 <I2C_IsAcknowledgeFailed>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e02d      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d021      	beq.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7fe fdb4 	bl	8001f98 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e007      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d1ca      	bne.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003494:	e042      	b.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d119      	bne.n	80034d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0210 	mvn.w	r2, #16
 80034ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e029      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d8:	f7fe fd5e 	bl	8001f98 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e007      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d1b5      	bne.n	8003496 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d11b      	bne.n	8003584 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003554:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d129      	bne.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0210 	bic.w	r2, r2, #16
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	d12a      	bne.n	800367a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	f023 030f 	bic.w	r3, r3, #15
 800364a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b29a      	uxth	r2, r3
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	4313      	orrs	r3, r2
 8003654:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	89fa      	ldrh	r2, [r7, #14]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_PWREx_EnableOverDrive+0x90>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_PWREx_EnableOverDrive+0x90>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_PWREx_EnableOverDrive+0x90>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_PWREx_EnableOverDrive+0x94>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b4:	f7fe fc70 	bl	8001f98 <HAL_GetTick>
 80036b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036ba:	e009      	b.n	80036d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036bc:	f7fe fc6c 	bl	8001f98 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ca:	d901      	bls.n	80036d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e01f      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d1ee      	bne.n	80036bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e4:	f7fe fc58 	bl	8001f98 <HAL_GetTick>
 80036e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ea:	e009      	b.n	8003700 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036ec:	f7fe fc54 	bl	8001f98 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fa:	d901      	bls.n	8003700 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e007      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800370c:	d1ee      	bne.n	80036ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	420e0040 	.word	0x420e0040
 8003720:	40007000 	.word	0x40007000
 8003724:	420e0044 	.word	0x420e0044

08003728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e25e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d075      	beq.n	8003832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003746:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00c      	beq.n	800376c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d112      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4b82      	ldr	r3, [pc, #520]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d10b      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	4b7e      	ldr	r3, [pc, #504]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05b      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d157      	bne.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e239      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d106      	bne.n	800379c <HAL_RCC_OscConfig+0x74>
 800378e:	4b76      	ldr	r3, [pc, #472]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a75      	ldr	r2, [pc, #468]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x98>
 80037a6:	4b70      	ldr	r3, [pc, #448]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6f      	ldr	r2, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b6d      	ldr	r3, [pc, #436]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6c      	ldr	r2, [pc, #432]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 80037c0:	4b69      	ldr	r3, [pc, #420]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a68      	ldr	r2, [pc, #416]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fbda 	bl	8001f98 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fe fbd6 	bl	8001f98 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1fe      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b5b      	ldr	r3, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe fbc6 	bl	8001f98 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe fbc2 	bl	8001f98 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1ea      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	4b51      	ldr	r3, [pc, #324]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b44      	ldr	r3, [pc, #272]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1be      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4937      	ldr	r1, [pc, #220]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	e03a      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b34      	ldr	r3, [pc, #208]	; (800396c <HAL_RCC_OscConfig+0x244>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fe fb7b 	bl	8001f98 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fe fb77 	bl	8001f98 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e19f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4925      	ldr	r1, [pc, #148]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_OscConfig+0x244>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fb5a 	bl	8001f98 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fe fb56 	bl	8001f98 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e17e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d036      	beq.n	8003980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_RCC_OscConfig+0x248>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fe fb3a 	bl	8001f98 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe fb36 	bl	8001f98 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e15e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x200>
 8003946:	e01b      	b.n	8003980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_OscConfig+0x248>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7fe fb23 	bl	8001f98 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e00e      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003956:	f7fe fb1f 	bl	8001f98 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d907      	bls.n	8003974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e147      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
 8003968:	40023800 	.word	0x40023800
 800396c:	42470000 	.word	0x42470000
 8003970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ea      	bne.n	8003956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8097 	beq.w	8003abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b7d      	ldr	r3, [pc, #500]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a7c      	ldr	r2, [pc, #496]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b7a      	ldr	r3, [pc, #488]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b77      	ldr	r3, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b74      	ldr	r3, [pc, #464]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a73      	ldr	r2, [pc, #460]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fadf 	bl	8001f98 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fe fadb 	bl	8001f98 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e103      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x2ea>
 8003a04:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	e01c      	b.n	8003a4c <HAL_RCC_OscConfig+0x324>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x30c>
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a5e      	ldr	r2, [pc, #376]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a5b      	ldr	r2, [pc, #364]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x324>
 8003a34:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a57      	ldr	r2, [pc, #348]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a54      	ldr	r2, [pc, #336]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f023 0304 	bic.w	r3, r3, #4
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d015      	beq.n	8003a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe faa0 	bl	8001f98 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fa9c 	bl	8001f98 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0c2      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0ee      	beq.n	8003a5c <HAL_RCC_OscConfig+0x334>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a80:	f7fe fa8a 	bl	8001f98 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fe fa86 	bl	8001f98 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e0ac      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1ee      	bne.n	8003a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8098 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d05c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d141      	bne.n	8003b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fa5a 	bl	8001f98 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe fa56 	bl	8001f98 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e07e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	491b      	ldr	r1, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x478>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fe fa2f 	bl	8001f98 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fe fa2b 	bl	8001f98 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e053      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x416>
 8003b5c:	e04b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_RCC_OscConfig+0x478>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe fa18 	bl	8001f98 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fa14 	bl	8001f98 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e03c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x444>
 8003b8a:	e034      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e02f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0cc      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b68      	ldr	r3, [pc, #416]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d90c      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b65      	ldr	r3, [pc, #404]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0b8      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c58:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a58      	ldr	r2, [pc, #352]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b50      	ldr	r3, [pc, #320]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	494d      	ldr	r1, [pc, #308]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d044      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d119      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4b3f      	ldr	r3, [pc, #252]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e06f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e067      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4934      	ldr	r1, [pc, #208]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fe f950 	bl	8001f98 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fe f94c 	bl	8001f98 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e04f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 020c 	and.w	r2, r3, #12
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1eb      	bne.n	8003cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d20c      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e032      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4916      	ldr	r1, [pc, #88]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8a:	f000 f821 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	490a      	ldr	r1, [pc, #40]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	5ccb      	ldrb	r3, [r1, r3]
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe f8b0 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023c00 	.word	0x40023c00
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08006924 	.word	0x08006924
 8003dc8:	200017d8 	.word	0x200017d8
 8003dcc:	200017dc 	.word	0x200017dc

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd4:	b090      	sub	sp, #64	; 0x40
 8003dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de0:	2300      	movs	r3, #0
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d00d      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x40>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	f200 80a1 	bhi.w	8003f3c <HAL_RCC_GetSysClockFreq+0x16c>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x34>
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d003      	beq.n	8003e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e02:	e09b      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e08:	e09b      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0a:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e0e:	e098      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e10:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1a:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d028      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e26:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	099b      	lsrs	r3, r3, #6
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	627a      	str	r2, [r7, #36]	; 0x24
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e3c:	fb03 f201 	mul.w	r2, r3, r1
 8003e40:	2300      	movs	r3, #0
 8003e42:	fb00 f303 	mul.w	r3, r0, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	4a43      	ldr	r2, [pc, #268]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e50:	460a      	mov	r2, r1
 8003e52:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e56:	4413      	add	r3, r2
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	61fa      	str	r2, [r7, #28]
 8003e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e6a:	f7fc f9c7 	bl	80001fc <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4613      	mov	r3, r2
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e76:	e053      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	2200      	movs	r2, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	617a      	str	r2, [r7, #20]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e8a:	f04f 0b00 	mov.w	fp, #0
 8003e8e:	4652      	mov	r2, sl
 8003e90:	465b      	mov	r3, fp
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	0159      	lsls	r1, r3, #5
 8003e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea0:	0150      	lsls	r0, r2, #5
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	ebb2 080a 	subs.w	r8, r2, sl
 8003eaa:	eb63 090b 	sbc.w	r9, r3, fp
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ebe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ec2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ec6:	eb63 0509 	sbc.w	r5, r3, r9
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	00eb      	lsls	r3, r5, #3
 8003ed4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed8:	00e2      	lsls	r2, r4, #3
 8003eda:	4614      	mov	r4, r2
 8003edc:	461d      	mov	r5, r3
 8003ede:	eb14 030a 	adds.w	r3, r4, sl
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	eb45 030b 	adc.w	r3, r5, fp
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	028b      	lsls	r3, r1, #10
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f00:	4621      	mov	r1, r4
 8003f02:	028a      	lsls	r2, r1, #10
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	60fa      	str	r2, [r7, #12]
 8003f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f14:	f7fc f972 	bl	80001fc <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3740      	adds	r7, #64	; 0x40
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	017d7840 	.word	0x017d7840

08003f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	200017d8 	.word	0x200017d8

08003f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f78:	f7ff fff0 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	0a9b      	lsrs	r3, r3, #10
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	4903      	ldr	r1, [pc, #12]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8a:	5ccb      	ldrb	r3, [r1, r3]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40023800 	.word	0x40023800
 8003f98:	08006934 	.word	0x08006934

08003f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa0:	f7ff ffdc 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0b5b      	lsrs	r3, r3, #13
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08006934 	.word	0x08006934

08003fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e01d      	b.n	8004012 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fe24 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f000 fb5a 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d007      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01d      	b.n	80040b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f815 	bl	80040b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fb0b 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fdd6 	bl	8004c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_TIM_PWM_Start+0x74>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_TIM_PWM_Start+0x2c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <HAL_TIM_PWM_Start+0x78>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_TIM_PWM_Start+0x30>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_TIM_PWM_Start+0x32>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d007      	beq.n	8004134 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40010400 	.word	0x40010400

08004148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0202 	mvn.w	r2, #2
 8004174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa78 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa6a 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa7b 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0204 	mvn.w	r2, #4
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa4e 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa40 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa51 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0208 	mvn.w	r2, #8
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa24 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa16 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa27 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9fa 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9ec 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9fd 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0201 	mvn.w	r2, #1
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc fa96 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b80      	cmp	r3, #128	; 0x80
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fdca 	bl	8004e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9c2 	bl	80046a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b20      	cmp	r3, #32
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0220 	mvn.w	r2, #32
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd94 	bl	8004e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800436e:	2302      	movs	r3, #2
 8004370:	e0b4      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	f200 809f 	bhi.w	80044c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080044c9 	.word	0x080044c9
 8004398:	080044c9 	.word	0x080044c9
 800439c:	080044c9 	.word	0x080044c9
 80043a0:	08004405 	.word	0x08004405
 80043a4:	080044c9 	.word	0x080044c9
 80043a8:	080044c9 	.word	0x080044c9
 80043ac:	080044c9 	.word	0x080044c9
 80043b0:	08004447 	.word	0x08004447
 80043b4:	080044c9 	.word	0x080044c9
 80043b8:	080044c9 	.word	0x080044c9
 80043bc:	080044c9 	.word	0x080044c9
 80043c0:	08004487 	.word	0x08004487
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa16 	bl	80047fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0204 	bic.w	r2, r2, #4
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
      break;
 8004402:	e062      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fa66 	bl	80048dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	619a      	str	r2, [r3, #24]
      break;
 8004444:	e041      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fabb 	bl	80049c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0208 	orr.w	r2, r2, #8
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	61da      	str	r2, [r3, #28]
      break;
 8004484:	e021      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fb0f 	bl	8004ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	021a      	lsls	r2, r3, #8
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	61da      	str	r2, [r3, #28]
      break;
 80044c6:	e000      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80044c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_ConfigClockSource+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e0b3      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x180>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004534:	d03e      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	f200 8087 	bhi.w	800464c <HAL_TIM_ConfigClockSource+0x168>
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004542:	f000 8085 	beq.w	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d87f      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800454c:	2b70      	cmp	r3, #112	; 0x70
 800454e:	d01a      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xa2>
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d87b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004554:	2b60      	cmp	r3, #96	; 0x60
 8004556:	d050      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x116>
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d877      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d03c      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xf6>
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d873      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d058      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x136>
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d86f      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	d064      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d86b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d060      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d867      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004580:	2b10      	cmp	r3, #16
 8004582:	d05a      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004584:	e062      	b.n	800464c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f000 fb5b 	bl	8004c50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
      break;
 80045b2:	e04e      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f000 fb44 	bl	8004c50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d6:	609a      	str	r2, [r3, #8]
      break;
 80045d8:	e03b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fab8 	bl	8004b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2150      	movs	r1, #80	; 0x50
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fb11 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 80045f8:	e02b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fad7 	bl	8004bba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2160      	movs	r1, #96	; 0x60
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb01 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 8004618:	e01b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fa98 	bl	8004b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	4618      	mov	r0, r3
 8004634:	f000 faf1 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 8004638:	e00b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 fae8 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800464a:	e002      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a40      	ldr	r2, [pc, #256]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d00f      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <TIM_Base_SetConfig+0x118>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <TIM_Base_SetConfig+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <TIM_Base_SetConfig+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d108      	bne.n	800470e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d027      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <TIM_Base_SetConfig+0x118>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d023      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <TIM_Base_SetConfig+0x11c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <TIM_Base_SetConfig+0x120>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d017      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <TIM_Base_SetConfig+0x128>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <TIM_Base_SetConfig+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <TIM_Base_SetConfig+0x130>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <TIM_Base_SetConfig+0x134>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <TIM_Base_SetConfig+0x138>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <TIM_Base_SetConfig+0x13c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0xf8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d103      	bne.n	80047bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	615a      	str	r2, [r3, #20]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40001800 	.word	0x40001800
 80047f4:	40001c00 	.word	0x40001c00
 80047f8:	40002000 	.word	0x40002000

080047fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 0302 	bic.w	r3, r3, #2
 8004844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <TIM_OC1_SetConfig+0xd8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC1_SetConfig+0x64>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <TIM_OC1_SetConfig+0xdc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10c      	bne.n	800487a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0308 	bic.w	r3, r3, #8
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 0304 	bic.w	r3, r3, #4
 8004878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <TIM_OC1_SetConfig+0xd8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_OC1_SetConfig+0x8e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <TIM_OC1_SetConfig+0xdc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d111      	bne.n	80048ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40010400 	.word	0x40010400

080048dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0210 	bic.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0320 	bic.w	r3, r3, #32
 8004926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <TIM_OC2_SetConfig+0xe4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_OC2_SetConfig+0x68>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <TIM_OC2_SetConfig+0xe8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10d      	bne.n	8004960 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <TIM_OC2_SetConfig+0xe4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_OC2_SetConfig+0x94>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <TIM_OC2_SetConfig+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d113      	bne.n	8004998 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800497e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40010400 	.word	0x40010400

080049c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <TIM_OC3_SetConfig+0xe0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_OC3_SetConfig+0x66>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a20      	ldr	r2, [pc, #128]	; (8004aac <TIM_OC3_SetConfig+0xe4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10d      	bne.n	8004a4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <TIM_OC3_SetConfig+0xe0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC3_SetConfig+0x92>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC3_SetConfig+0xe4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40010400 	.word	0x40010400

08004ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <TIM_OC4_SetConfig+0xa4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC4_SetConfig+0x68>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <TIM_OC4_SetConfig+0xa8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40010400 	.word	0x40010400

08004b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 030a 	bic.w	r3, r3, #10
 8004b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0210 	bic.w	r2, r3, #16
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f043 0307 	orr.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e05a      	b.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d01d      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10c      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800

08004dd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e03d      	b.n	8004e6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e03f      	b.n	8004f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc ff2e 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fb7d 	bl	80055e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af02      	add	r7, sp, #8
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	f040 8083 	bne.w	8005062 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_UART_Transmit+0x2e>
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e07b      	b.n	8005064 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_UART_Transmit+0x40>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e074      	b.n	8005064 <HAL_UART_Transmit+0x12a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2221      	movs	r2, #33	; 0x21
 8004f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f90:	f7fd f802 	bl	8001f98 <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	88fa      	ldrh	r2, [r7, #6]
 8004f9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004faa:	e042      	b.n	8005032 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d122      	bne.n	800500a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f99c 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e042      	b.n	8005064 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	e017      	b.n	8005032 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3301      	adds	r3, #1
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	e013      	b.n	8005032 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f979 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e01f      	b.n	8005064 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	60ba      	str	r2, [r7, #8]
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1b7      	bne.n	8004fac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f960 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e006      	b.n	8005064 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b20      	cmp	r3, #32
 8005084:	d130      	bne.n	80050e8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_UART_Transmit_IT+0x26>
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e029      	b.n	80050ea <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Transmit_IT+0x38>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e022      	b.n	80050ea <HAL_UART_Transmit_IT+0x7e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2221      	movs	r2, #33	; 0x21
 80050c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_UART_IRQHandler+0x52>
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9cc 	bl	80054e0 <UART_Receive_IT>
      return;
 8005148:	e0d0      	b.n	80052ec <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80b0 	beq.w	80052b2 <HAL_UART_IRQHandler+0x1ba>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <HAL_UART_IRQHandler+0x70>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80a5 	beq.w	80052b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_UART_IRQHandler+0x90>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_UART_IRQHandler+0xb0>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	f043 0202 	orr.w	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_UART_IRQHandler+0xd0>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	f043 0204 	orr.w	r2, r3, #4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00f      	beq.n	80051f2 <HAL_UART_IRQHandler+0xfa>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_UART_IRQHandler+0xee>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	f043 0208 	orr.w	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d077      	beq.n	80052ea <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_UART_IRQHandler+0x11c>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f966 	bl	80054e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <HAL_UART_IRQHandler+0x144>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d031      	beq.n	80052a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8af 	bl	80053a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d123      	bne.n	8005298 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	2b00      	cmp	r3, #0
 8005266:	d013      	beq.n	8005290 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_UART_IRQHandler+0x1fc>)
 800526e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	4618      	mov	r0, r3
 8005276:	f7fc ffd0 	bl	800221a <HAL_DMA_Abort_IT>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d016      	beq.n	80052ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800528a:	4610      	mov	r0, r2
 800528c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528e:	e00e      	b.n	80052ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f831 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005296:	e00a      	b.n	80052ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f82d 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529e:	e006      	b.n	80052ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f829 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052ac:	e01d      	b.n	80052ea <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ae:	bf00      	nop
    return;
 80052b0:	e01b      	b.n	80052ea <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_UART_IRQHandler+0x1d6>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f89c 	bl	8005404 <UART_Transmit_IT>
    return;
 80052cc:	e00e      	b.n	80052ec <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <HAL_UART_IRQHandler+0x1f4>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8e4 	bl	80054b0 <UART_EndTransmit_IT>
    return;
 80052e8:	e000      	b.n	80052ec <HAL_UART_IRQHandler+0x1f4>
    return;
 80052ea:	bf00      	nop
  }
}
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	080053dd 	.word	0x080053dd

080052f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	e02c      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d028      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <UART_WaitOnFlagUntilTimeout+0x30>
 800532c:	f7fc fe34 	bl	8001f98 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	429a      	cmp	r2, r3
 800533a:	d21d      	bcs.n	8005378 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800534a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e00f      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	429a      	cmp	r2, r3
 8005394:	d0c3      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff ff7e 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b21      	cmp	r3, #33	; 0x21
 8005416:	d144      	bne.n	80054a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005420:	d11a      	bne.n	8005458 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005436:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]
 800544a:	e00e      	b.n	800546a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]
 8005456:	e008      	b.n	800546a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6211      	str	r1, [r2, #32]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4619      	mov	r1, r3
 8005478:	84d1      	strh	r1, [r2, #38]	; 0x26
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800548c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fb f93d 	bl	8000750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b22      	cmp	r3, #34	; 0x22
 80054f2:	d171      	bne.n	80055d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d123      	bne.n	8005546 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10e      	bne.n	800552a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	1c9a      	adds	r2, r3, #2
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
 8005528:	e029      	b.n	800557e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	b29b      	uxth	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28
 8005544:	e01b      	b.n	800557e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6858      	ldr	r0, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6291      	str	r1, [r2, #40]	; 0x28
 800555e:	b2c2      	uxtb	r2, r0
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e00c      	b.n	800557e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	1c58      	adds	r0, r3, #1
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	6288      	str	r0, [r1, #40]	; 0x28
 8005576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29b      	uxth	r3, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4619      	mov	r1, r3
 800558c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800558e:	2b00      	cmp	r3, #0
 8005590:	d120      	bne.n	80055d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0220 	bic.w	r2, r2, #32
 80055a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fb f8a8 	bl	8000720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e002      	b.n	80055da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005602:	68d9      	ldr	r1, [r3, #12]
 8005604:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	ea40 0301 	orr.w	r3, r0, r1
 800560e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005610:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	431a      	orrs	r2, r3
 800561e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	431a      	orrs	r2, r3
 8005626:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8005632:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800563e:	f021 010c 	bic.w	r1, r1, #12
 8005642:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800564c:	430b      	orrs	r3, r1
 800564e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005650:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800565c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	ea40 0301 	orr.w	r3, r0, r1
 800566c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005678:	f040 824a 	bne.w	8005b10 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800567c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b96      	ldr	r3, [pc, #600]	; (80058dc <UART_SetConfig+0x2f8>)
 8005684:	429a      	cmp	r2, r3
 8005686:	d006      	beq.n	8005696 <UART_SetConfig+0xb2>
 8005688:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b94      	ldr	r3, [pc, #592]	; (80058e0 <UART_SetConfig+0x2fc>)
 8005690:	429a      	cmp	r2, r3
 8005692:	f040 8129 	bne.w	80058e8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005696:	f7fe fc81 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 800569a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80056a8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80056ac:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80056b0:	4622      	mov	r2, r4
 80056b2:	462b      	mov	r3, r5
 80056b4:	1891      	adds	r1, r2, r2
 80056b6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80056ba:	415b      	adcs	r3, r3
 80056bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056c0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80056c4:	4621      	mov	r1, r4
 80056c6:	1851      	adds	r1, r2, r1
 80056c8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80056cc:	4629      	mov	r1, r5
 80056ce:	414b      	adcs	r3, r1
 80056d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80056e0:	4649      	mov	r1, r9
 80056e2:	00cb      	lsls	r3, r1, #3
 80056e4:	4641      	mov	r1, r8
 80056e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ea:	4641      	mov	r1, r8
 80056ec:	00ca      	lsls	r2, r1, #3
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	4622      	mov	r2, r4
 80056f6:	189b      	adds	r3, r3, r2
 80056f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80056fc:	462b      	mov	r3, r5
 80056fe:	460a      	mov	r2, r1
 8005700:	eb42 0303 	adc.w	r3, r2, r3
 8005704:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005708:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005714:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8005718:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800571c:	460b      	mov	r3, r1
 800571e:	18db      	adds	r3, r3, r3
 8005720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005724:	4613      	mov	r3, r2
 8005726:	eb42 0303 	adc.w	r3, r2, r3
 800572a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800572e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005732:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005736:	f7fa fd61 	bl	80001fc <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4b69      	ldr	r3, [pc, #420]	; (80058e4 <UART_SetConfig+0x300>)
 8005740:	fba3 2302 	umull	r2, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	011c      	lsls	r4, r3, #4
 8005748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800574c:	2200      	movs	r2, #0
 800574e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005752:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005756:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800575a:	4642      	mov	r2, r8
 800575c:	464b      	mov	r3, r9
 800575e:	1891      	adds	r1, r2, r2
 8005760:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005764:	415b      	adcs	r3, r3
 8005766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800576a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800576e:	4641      	mov	r1, r8
 8005770:	1851      	adds	r1, r2, r1
 8005772:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005776:	4649      	mov	r1, r9
 8005778:	414b      	adcs	r3, r1
 800577a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800578a:	4659      	mov	r1, fp
 800578c:	00cb      	lsls	r3, r1, #3
 800578e:	4651      	mov	r1, sl
 8005790:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005794:	4651      	mov	r1, sl
 8005796:	00ca      	lsls	r2, r1, #3
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	4603      	mov	r3, r0
 800579e:	4642      	mov	r2, r8
 80057a0:	189b      	adds	r3, r3, r2
 80057a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80057a6:	464b      	mov	r3, r9
 80057a8:	460a      	mov	r2, r1
 80057aa:	eb42 0303 	adc.w	r3, r2, r3
 80057ae:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80057b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80057be:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80057c2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80057c6:	460b      	mov	r3, r1
 80057c8:	18db      	adds	r3, r3, r3
 80057ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057ce:	4613      	mov	r3, r2
 80057d0:	eb42 0303 	adc.w	r3, r2, r3
 80057d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80057dc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80057e0:	f7fa fd0c 	bl	80001fc <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <UART_SetConfig+0x300>)
 80057ec:	fba3 2301 	umull	r2, r3, r3, r1
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	2264      	movs	r2, #100	; 0x64
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	1acb      	subs	r3, r1, r3
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005800:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <UART_SetConfig+0x300>)
 8005802:	fba3 2302 	umull	r2, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800580e:	441c      	add	r4, r3
 8005810:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005814:	2200      	movs	r2, #0
 8005816:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800581a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800581e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005822:	4642      	mov	r2, r8
 8005824:	464b      	mov	r3, r9
 8005826:	1891      	adds	r1, r2, r2
 8005828:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800582c:	415b      	adcs	r3, r3
 800582e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005832:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005836:	4641      	mov	r1, r8
 8005838:	1851      	adds	r1, r2, r1
 800583a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800583e:	4649      	mov	r1, r9
 8005840:	414b      	adcs	r3, r1
 8005842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8005852:	4659      	mov	r1, fp
 8005854:	00cb      	lsls	r3, r1, #3
 8005856:	4651      	mov	r1, sl
 8005858:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585c:	4651      	mov	r1, sl
 800585e:	00ca      	lsls	r2, r1, #3
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	4603      	mov	r3, r0
 8005866:	4642      	mov	r2, r8
 8005868:	189b      	adds	r3, r3, r2
 800586a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800586e:	464b      	mov	r3, r9
 8005870:	460a      	mov	r2, r1
 8005872:	eb42 0303 	adc.w	r3, r2, r3
 8005876:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800587a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005886:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800588a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800588e:	460b      	mov	r3, r1
 8005890:	18db      	adds	r3, r3, r3
 8005892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005896:	4613      	mov	r3, r2
 8005898:	eb42 0303 	adc.w	r3, r2, r3
 800589c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80058a4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80058a8:	f7fa fca8 	bl	80001fc <__aeabi_uldivmod>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <UART_SetConfig+0x300>)
 80058b2:	fba3 1302 	umull	r1, r3, r3, r2
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2164      	movs	r1, #100	; 0x64
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	3332      	adds	r3, #50	; 0x32
 80058c4:	4a07      	ldr	r2, [pc, #28]	; (80058e4 <UART_SetConfig+0x300>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	f003 0207 	and.w	r2, r3, #7
 80058d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4422      	add	r2, r4
 80058d8:	609a      	str	r2, [r3, #8]
 80058da:	e349      	b.n	8005f70 <UART_SetConfig+0x98c>
 80058dc:	40011000 	.word	0x40011000
 80058e0:	40011400 	.word	0x40011400
 80058e4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fe fb44 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 80058ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80058fa:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80058fe:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8005902:	4622      	mov	r2, r4
 8005904:	462b      	mov	r3, r5
 8005906:	1891      	adds	r1, r2, r2
 8005908:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800590c:	415b      	adcs	r3, r3
 800590e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005912:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005916:	4621      	mov	r1, r4
 8005918:	eb12 0a01 	adds.w	sl, r2, r1
 800591c:	4629      	mov	r1, r5
 800591e:	eb43 0b01 	adc.w	fp, r3, r1
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800592e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005932:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005936:	4692      	mov	sl, r2
 8005938:	469b      	mov	fp, r3
 800593a:	4623      	mov	r3, r4
 800593c:	eb1a 0303 	adds.w	r3, sl, r3
 8005940:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005944:	462b      	mov	r3, r5
 8005946:	eb4b 0303 	adc.w	r3, fp, r3
 800594a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800594e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800595a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800595e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8005962:	460b      	mov	r3, r1
 8005964:	18db      	adds	r3, r3, r3
 8005966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800596a:	4613      	mov	r3, r2
 800596c:	eb42 0303 	adc.w	r3, r2, r3
 8005970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005974:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005978:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800597c:	f7fa fc3e 	bl	80001fc <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4b61      	ldr	r3, [pc, #388]	; (8005b0c <UART_SetConfig+0x528>)
 8005986:	fba3 2302 	umull	r2, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	011c      	lsls	r4, r3, #4
 800598e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005992:	2200      	movs	r2, #0
 8005994:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005998:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800599c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	1891      	adds	r1, r2, r2
 80059a6:	67b9      	str	r1, [r7, #120]	; 0x78
 80059a8:	415b      	adcs	r3, r3
 80059aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80059b0:	4641      	mov	r1, r8
 80059b2:	1851      	adds	r1, r2, r1
 80059b4:	6739      	str	r1, [r7, #112]	; 0x70
 80059b6:	4649      	mov	r1, r9
 80059b8:	414b      	adcs	r3, r1
 80059ba:	677b      	str	r3, [r7, #116]	; 0x74
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80059c8:	4659      	mov	r1, fp
 80059ca:	00cb      	lsls	r3, r1, #3
 80059cc:	4651      	mov	r1, sl
 80059ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d2:	4651      	mov	r1, sl
 80059d4:	00ca      	lsls	r2, r1, #3
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	4642      	mov	r2, r8
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80059e4:	464b      	mov	r3, r9
 80059e6:	460a      	mov	r2, r1
 80059e8:	eb42 0303 	adc.w	r3, r2, r3
 80059ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80059f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80059fc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005a00:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8005a04:	460b      	mov	r3, r1
 8005a06:	18db      	adds	r3, r3, r3
 8005a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	eb42 0303 	adc.w	r3, r2, r3
 8005a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a12:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005a16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005a1a:	f7fa fbef 	bl	80001fc <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <UART_SetConfig+0x528>)
 8005a26:	fba3 2301 	umull	r2, r3, r3, r1
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2264      	movs	r2, #100	; 0x64
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	1acb      	subs	r3, r1, r3
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a3a:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <UART_SetConfig+0x528>)
 8005a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a48:	441c      	add	r4, r3
 8005a4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005a54:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005a58:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	1891      	adds	r1, r2, r2
 8005a62:	6639      	str	r1, [r7, #96]	; 0x60
 8005a64:	415b      	adcs	r3, r3
 8005a66:	667b      	str	r3, [r7, #100]	; 0x64
 8005a68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	1851      	adds	r1, r2, r1
 8005a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a72:	4649      	mov	r1, r9
 8005a74:	414b      	adcs	r3, r1
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005a84:	4659      	mov	r1, fp
 8005a86:	00cb      	lsls	r3, r1, #3
 8005a88:	4651      	mov	r1, sl
 8005a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8e:	4651      	mov	r1, sl
 8005a90:	00ca      	lsls	r2, r1, #3
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	4642      	mov	r2, r8
 8005a9a:	189b      	adds	r3, r3, r2
 8005a9c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	eb42 0303 	adc.w	r3, r2, r3
 8005aa8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005ab8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8005abc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	18db      	adds	r3, r3, r3
 8005ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	eb42 0303 	adc.w	r3, r2, r3
 8005acc:	657b      	str	r3, [r7, #84]	; 0x54
 8005ace:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ad2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8005ad6:	f7fa fb91 	bl	80001fc <__aeabi_uldivmod>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <UART_SetConfig+0x528>)
 8005ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	2164      	movs	r1, #100	; 0x64
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	3332      	adds	r3, #50	; 0x32
 8005af2:	4a06      	ldr	r2, [pc, #24]	; (8005b0c <UART_SetConfig+0x528>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	f003 0207 	and.w	r2, r3, #7
 8005afe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4422      	add	r2, r4
 8005b06:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b08:	e232      	b.n	8005f70 <UART_SetConfig+0x98c>
 8005b0a:	bf00      	nop
 8005b0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b8d      	ldr	r3, [pc, #564]	; (8005d4c <UART_SetConfig+0x768>)
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d006      	beq.n	8005b2a <UART_SetConfig+0x546>
 8005b1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b8b      	ldr	r3, [pc, #556]	; (8005d50 <UART_SetConfig+0x76c>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	f040 8117 	bne.w	8005d58 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b2a:	f7fe fa37 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8005b2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005b3c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005b40:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005b44:	4622      	mov	r2, r4
 8005b46:	462b      	mov	r3, r5
 8005b48:	1891      	adds	r1, r2, r2
 8005b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b4c:	415b      	adcs	r3, r3
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b54:	4621      	mov	r1, r4
 8005b56:	eb12 0801 	adds.w	r8, r2, r1
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	eb43 0901 	adc.w	r9, r3, r1
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b74:	4690      	mov	r8, r2
 8005b76:	4699      	mov	r9, r3
 8005b78:	4623      	mov	r3, r4
 8005b7a:	eb18 0303 	adds.w	r3, r8, r3
 8005b7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005b82:	462b      	mov	r3, r5
 8005b84:	eb49 0303 	adc.w	r3, r9, r3
 8005b88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005b8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005b98:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8005ba8:	4629      	mov	r1, r5
 8005baa:	008b      	lsls	r3, r1, #2
 8005bac:	4621      	mov	r1, r4
 8005bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	008a      	lsls	r2, r1, #2
 8005bb6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8005bba:	f7fa fb1f 	bl	80001fc <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4b64      	ldr	r3, [pc, #400]	; (8005d54 <UART_SetConfig+0x770>)
 8005bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	011c      	lsls	r4, r3, #4
 8005bcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005bd6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005bda:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8005bde:	4642      	mov	r2, r8
 8005be0:	464b      	mov	r3, r9
 8005be2:	1891      	adds	r1, r2, r2
 8005be4:	6439      	str	r1, [r7, #64]	; 0x40
 8005be6:	415b      	adcs	r3, r3
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bee:	4641      	mov	r1, r8
 8005bf0:	1851      	adds	r1, r2, r1
 8005bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	414b      	adcs	r3, r1
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8005c06:	4659      	mov	r1, fp
 8005c08:	00cb      	lsls	r3, r1, #3
 8005c0a:	4651      	mov	r1, sl
 8005c0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c10:	4651      	mov	r1, sl
 8005c12:	00ca      	lsls	r2, r1, #3
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005c22:	464b      	mov	r3, r9
 8005c24:	460a      	mov	r2, r1
 8005c26:	eb42 0303 	adc.w	r3, r2, r3
 8005c2a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005c2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005c3a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	008b      	lsls	r3, r1, #2
 8005c4e:	4641      	mov	r1, r8
 8005c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c54:	4641      	mov	r1, r8
 8005c56:	008a      	lsls	r2, r1, #2
 8005c58:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005c5c:	f7fa face 	bl	80001fc <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <UART_SetConfig+0x770>)
 8005c66:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	3332      	adds	r3, #50	; 0x32
 8005c78:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <UART_SetConfig+0x770>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c84:	441c      	add	r4, r3
 8005c86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c90:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005c94:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	1891      	adds	r1, r2, r2
 8005c9e:	6339      	str	r1, [r7, #48]	; 0x30
 8005ca0:	415b      	adcs	r3, r3
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ca8:	4641      	mov	r1, r8
 8005caa:	1851      	adds	r1, r2, r1
 8005cac:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cae:	4649      	mov	r1, r9
 8005cb0:	414b      	adcs	r3, r1
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	00cb      	lsls	r3, r1, #3
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cca:	4651      	mov	r1, sl
 8005ccc:	00ca      	lsls	r2, r1, #3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	189b      	adds	r3, r3, r2
 8005cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005cdc:	464b      	mov	r3, r9
 8005cde:	460a      	mov	r2, r1
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ce8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cf4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8005d04:	4649      	mov	r1, r9
 8005d06:	008b      	lsls	r3, r1, #2
 8005d08:	4641      	mov	r1, r8
 8005d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0e:	4641      	mov	r1, r8
 8005d10:	008a      	lsls	r2, r1, #2
 8005d12:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005d16:	f7fa fa71 	bl	80001fc <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <UART_SetConfig+0x770>)
 8005d20:	fba3 1302 	umull	r1, r3, r3, r2
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	2164      	movs	r1, #100	; 0x64
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	3332      	adds	r3, #50	; 0x32
 8005d32:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <UART_SetConfig+0x770>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4422      	add	r2, r4
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	e112      	b.n	8005f70 <UART_SetConfig+0x98c>
 8005d4a:	bf00      	nop
 8005d4c:	40011000 	.word	0x40011000
 8005d50:	40011400 	.word	0x40011400
 8005d54:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7fe f90c 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005d6e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	1891      	adds	r1, r2, r2
 8005d78:	6239      	str	r1, [r7, #32]
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d82:	4641      	mov	r1, r8
 8005d84:	1854      	adds	r4, r2, r1
 8005d86:	4649      	mov	r1, r9
 8005d88:	eb43 0501 	adc.w	r5, r3, r1
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	00eb      	lsls	r3, r5, #3
 8005d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d9a:	00e2      	lsls	r2, r4, #3
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	461d      	mov	r5, r3
 8005da0:	4643      	mov	r3, r8
 8005da2:	18e3      	adds	r3, r4, r3
 8005da4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005da8:	464b      	mov	r3, r9
 8005daa:	eb45 0303 	adc.w	r3, r5, r3
 8005dae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005db2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dbe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005dce:	4629      	mov	r1, r5
 8005dd0:	008b      	lsls	r3, r1, #2
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd8:	4621      	mov	r1, r4
 8005dda:	008a      	lsls	r2, r1, #2
 8005ddc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005de0:	f7fa fa0c 	bl	80001fc <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4b64      	ldr	r3, [pc, #400]	; (8005f7c <UART_SetConfig+0x998>)
 8005dea:	fba3 2302 	umull	r2, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	011c      	lsls	r4, r3, #4
 8005df2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dfc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005e00:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	61b9      	str	r1, [r7, #24]
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e14:	4641      	mov	r1, r8
 8005e16:	1851      	adds	r1, r2, r1
 8005e18:	6139      	str	r1, [r7, #16]
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	414b      	adcs	r3, r1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	00cb      	lsls	r3, r1, #3
 8005e30:	4651      	mov	r1, sl
 8005e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e36:	4651      	mov	r1, sl
 8005e38:	00ca      	lsls	r2, r1, #3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4642      	mov	r2, r8
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e48:	464b      	mov	r3, r9
 8005e4a:	460a      	mov	r2, r1
 8005e4c:	eb42 0303 	adc.w	r3, r2, r3
 8005e50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e60:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005e70:	4649      	mov	r1, r9
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	4641      	mov	r1, r8
 8005e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	008a      	lsls	r2, r1, #2
 8005e7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005e82:	f7fa f9bb 	bl	80001fc <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b3c      	ldr	r3, [pc, #240]	; (8005f7c <UART_SetConfig+0x998>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a37      	ldr	r2, [pc, #220]	; (8005f7c <UART_SetConfig+0x998>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eaa:	441c      	add	r4, r3
 8005eac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eba:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ece:	4641      	mov	r1, r8
 8005ed0:	1851      	adds	r1, r2, r1
 8005ed2:	6039      	str	r1, [r7, #0]
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	414b      	adcs	r3, r1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	00cb      	lsls	r3, r1, #3
 8005eea:	4651      	mov	r1, sl
 8005eec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef0:	4651      	mov	r1, sl
 8005ef2:	00ca      	lsls	r2, r1, #3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4642      	mov	r2, r8
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f02:	464b      	mov	r3, r9
 8005f04:	460a      	mov	r2, r1
 8005f06:	eb42 0303 	adc.w	r3, r2, r3
 8005f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	008b      	lsls	r3, r1, #2
 8005f2e:	4641      	mov	r1, r8
 8005f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f34:	4641      	mov	r1, r8
 8005f36:	008a      	lsls	r2, r1, #2
 8005f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f3c:	f7fa f95e 	bl	80001fc <__aeabi_uldivmod>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <UART_SetConfig+0x998>)
 8005f46:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2164      	movs	r1, #100	; 0x64
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	3332      	adds	r3, #50	; 0x32
 8005f58:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <UART_SetConfig+0x998>)
 8005f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f003 020f 	and.w	r2, r3, #15
 8005f64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4422      	add	r2, r4
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	e7ff      	b.n	8005f70 <UART_SetConfig+0x98c>
 8005f70:	bf00      	nop
 8005f72:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f7c:	51eb851f 	.word	0x51eb851f

08005f80 <__libc_init_array>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4d0d      	ldr	r5, [pc, #52]	; (8005fb8 <__libc_init_array+0x38>)
 8005f84:	4c0d      	ldr	r4, [pc, #52]	; (8005fbc <__libc_init_array+0x3c>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	42a6      	cmp	r6, r4
 8005f8e:	d109      	bne.n	8005fa4 <__libc_init_array+0x24>
 8005f90:	4d0b      	ldr	r5, [pc, #44]	; (8005fc0 <__libc_init_array+0x40>)
 8005f92:	4c0c      	ldr	r4, [pc, #48]	; (8005fc4 <__libc_init_array+0x44>)
 8005f94:	f000 f836 	bl	8006004 <_init>
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	d105      	bne.n	8005fae <__libc_init_array+0x2e>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa8:	4798      	blx	r3
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7ee      	b.n	8005f8c <__libc_init_array+0xc>
 8005fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb2:	4798      	blx	r3
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7f2      	b.n	8005f9e <__libc_init_array+0x1e>
 8005fb8:	08006a48 	.word	0x08006a48
 8005fbc:	08006a48 	.word	0x08006a48
 8005fc0:	08006a48 	.word	0x08006a48
 8005fc4:	08006a4c 	.word	0x08006a4c

08005fc8 <memcpy>:
 8005fc8:	440a      	add	r2, r1
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd0:	d100      	bne.n	8005fd4 <memcpy+0xc>
 8005fd2:	4770      	bx	lr
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	d1f9      	bne.n	8005fd6 <memcpy+0xe>
 8005fe2:	bd10      	pop	{r4, pc}

08005fe4 <memset>:
 8005fe4:	4402      	add	r2, r0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d100      	bne.n	8005fee <memset+0xa>
 8005fec:	4770      	bx	lr
 8005fee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff2:	e7f9      	b.n	8005fe8 <memset+0x4>

08005ff4 <strcpy>:
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ffa:	f803 2b01 	strb.w	r2, [r3], #1
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	d1f9      	bne.n	8005ff6 <strcpy+0x2>
 8006002:	4770      	bx	lr

08006004 <_init>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr

08006010 <_fini>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	bf00      	nop
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr
